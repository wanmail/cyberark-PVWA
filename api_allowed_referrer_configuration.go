/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AllowedReferrerConfigurationApiService AllowedReferrerConfigurationApi service
type AllowedReferrerConfigurationApiService service

type ApiAllowedReferrerConfigurationAddAllowedReferrerRequest struct {
	ctx context.Context
	ApiService *AllowedReferrerConfigurationApiService
	item *AllowedReferrerDto
}

func (r ApiAllowedReferrerConfigurationAddAllowedReferrerRequest) Item(item AllowedReferrerDto) ApiAllowedReferrerConfigurationAddAllowedReferrerRequest {
	r.item = &item
	return r
}

func (r ApiAllowedReferrerConfigurationAddAllowedReferrerRequest) Execute() (*AllowedReferrerDto, *http.Response, error) {
	return r.ApiService.AllowedReferrerConfigurationAddAllowedReferrerExecute(r)
}

/*
AllowedReferrerConfigurationAddAllowedReferrer Method for AllowedReferrerConfigurationAddAllowedReferrer

This method adds a web application URL to the allowed referrer list.This means access is allowed from the URL to the PVWA.
Any user who is a member of the Vault admins group can run this web service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllowedReferrerConfigurationAddAllowedReferrerRequest
*/
func (a *AllowedReferrerConfigurationApiService) AllowedReferrerConfigurationAddAllowedReferrer(ctx context.Context) ApiAllowedReferrerConfigurationAddAllowedReferrerRequest {
	return ApiAllowedReferrerConfigurationAddAllowedReferrerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllowedReferrerDto
func (a *AllowedReferrerConfigurationApiService) AllowedReferrerConfigurationAddAllowedReferrerExecute(r ApiAllowedReferrerConfigurationAddAllowedReferrerRequest) (*AllowedReferrerDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedReferrerDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedReferrerConfigurationApiService.AllowedReferrerConfigurationAddAllowedReferrer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Configuration/AccessRestriction/AllowedReferrers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.item == nil {
		return localVarReturnValue, nil, reportError("item is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.item
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest struct {
	ctx context.Context
	ApiService *AllowedReferrerConfigurationApiService
}

func (r ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest) Execute() ([]AllowedReferrerDto, *http.Response, error) {
	return r.ApiService.AllowedReferrerConfigurationGetAllAllowedReferrersExecute(r)
}

/*
AllowedReferrerConfigurationGetAllAllowedReferrers Method for AllowedReferrerConfigurationGetAllAllowedReferrers

This method returns the allowed referrer list. This means access is allowed from all URLs in the list, to the PVWA.
Any user who is a member of the Vault admins group can run this web service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest
*/
func (a *AllowedReferrerConfigurationApiService) AllowedReferrerConfigurationGetAllAllowedReferrers(ctx context.Context) ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest {
	return ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AllowedReferrerDto
func (a *AllowedReferrerConfigurationApiService) AllowedReferrerConfigurationGetAllAllowedReferrersExecute(r ApiAllowedReferrerConfigurationGetAllAllowedReferrersRequest) ([]AllowedReferrerDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AllowedReferrerDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedReferrerConfigurationApiService.AllowedReferrerConfigurationGetAllAllowedReferrers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Configuration/AccessRestriction/AllowedReferrers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
