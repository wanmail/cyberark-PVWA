/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// BulkAccountsApiService BulkAccountsApi service
type BulkAccountsApiService service

type ApiBulkAccountsAddBulkAccountsRequest struct {
	ctx context.Context
	ApiService *BulkAccountsApiService
	bulkAccountsModel *BulkAccountsModel
}

func (r ApiBulkAccountsAddBulkAccountsRequest) BulkAccountsModel(bulkAccountsModel BulkAccountsModel) ApiBulkAccountsAddBulkAccountsRequest {
	r.bulkAccountsModel = &bulkAccountsModel
	return r
}

func (r ApiBulkAccountsAddBulkAccountsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BulkAccountsAddBulkAccountsExecute(r)
}

/*
BulkAccountsAddBulkAccounts Method for BulkAccountsAddBulkAccounts

This method allows a developer to add multiple accounts to exsiting Safes.
The response contains the ID of the bulk action that was created.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkAccountsAddBulkAccountsRequest
*/
func (a *BulkAccountsApiService) BulkAccountsAddBulkAccounts(ctx context.Context) ApiBulkAccountsAddBulkAccountsRequest {
	return ApiBulkAccountsAddBulkAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BulkAccountsApiService) BulkAccountsAddBulkAccountsExecute(r ApiBulkAccountsAddBulkAccountsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAccountsApiService.BulkAccountsAddBulkAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/BulkActions/Accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkAccountsModel == nil {
		return localVarReturnValue, nil, reportError("bulkAccountsModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkAccountsModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkAccountsGetBulkActionRequest struct {
	ctx context.Context
	ApiService *BulkAccountsApiService
	bulkId int64
}

func (r ApiBulkAccountsGetBulkActionRequest) Execute() (*BulkAccountsOperationResultExtended, *http.Response, error) {
	return r.ApiService.BulkAccountsGetBulkActionExecute(r)
}

/*
BulkAccountsGetBulkAction Method for BulkAccountsGetBulkAction

This method returns the result of the bulk account upload, which is identified by the ID of the bulk account upload.
When the upload has finished, the API returns the result. The result contains a list of all the accounts that succeeded or failed to upload.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bulkId The identifier of the bulk account upload.
 @return ApiBulkAccountsGetBulkActionRequest
*/
func (a *BulkAccountsApiService) BulkAccountsGetBulkAction(ctx context.Context, bulkId int64) ApiBulkAccountsGetBulkActionRequest {
	return ApiBulkAccountsGetBulkActionRequest{
		ApiService: a,
		ctx: ctx,
		bulkId: bulkId,
	}
}

// Execute executes the request
//  @return BulkAccountsOperationResultExtended
func (a *BulkAccountsApiService) BulkAccountsGetBulkActionExecute(r ApiBulkAccountsGetBulkActionRequest) (*BulkAccountsOperationResultExtended, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkAccountsOperationResultExtended
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAccountsApiService.BulkAccountsGetBulkAction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/BulkActions/Accounts/{bulkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bulkId"+"}", url.PathEscape(parameterToString(r.bulkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkAccountsGetUserBulkAccountsActionsRequest struct {
	ctx context.Context
	ApiService *BulkAccountsApiService
	limit *int32
	filter *string
}

// Maximum number of returned bulk account actions. If not specified, the default value is 10. The maximum number that can be specified is 1000.
func (r ApiBulkAccountsGetUserBulkAccountsActionsRequest) Limit(limit int32) ApiBulkAccountsGetUserBulkAccountsActionsRequest {
	r.limit = &limit
	return r
}

// Search for bulk account actions filtered by spesific status. e.g. Filter&#x3D;status eq InProgress
func (r ApiBulkAccountsGetUserBulkAccountsActionsRequest) Filter(filter string) ApiBulkAccountsGetUserBulkAccountsActionsRequest {
	r.filter = &filter
	return r
}

func (r ApiBulkAccountsGetUserBulkAccountsActionsRequest) Execute() (*GetBulkAccountsActionsResult, *http.Response, error) {
	return r.ApiService.BulkAccountsGetUserBulkAccountsActionsExecute(r)
}

/*
BulkAccountsGetUserBulkAccountsActions Method for BulkAccountsGetUserBulkAccountsActions

This method gets the status of all bulk account uploads that the user performed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkAccountsGetUserBulkAccountsActionsRequest
*/
func (a *BulkAccountsApiService) BulkAccountsGetUserBulkAccountsActions(ctx context.Context) ApiBulkAccountsGetUserBulkAccountsActionsRequest {
	return ApiBulkAccountsGetUserBulkAccountsActionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBulkAccountsActionsResult
func (a *BulkAccountsApiService) BulkAccountsGetUserBulkAccountsActionsExecute(r ApiBulkAccountsGetUserBulkAccountsActionsRequest) (*GetBulkAccountsActionsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBulkAccountsActionsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAccountsApiService.BulkAccountsGetUserBulkAccountsActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/BulkActions/Accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
