/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// IncomingRequestsApiService IncomingRequestsApi service
type IncomingRequestsApiService service

type ApiIncomingRequestsConfirmRequestsRequest struct {
	ctx context.Context
	ApiService *IncomingRequestsApiService
	requestID string
	confirmationInfo *ConfirmRejectData
	requestorFullName *string
	requestID2 *string
	safeName *string
	requestorUserName *string
	requestorReason *string
	userReason *string
	creationDate *int64
	operation *string
	expirationDate *int64
	operationType *int32
	accessType *string
	confirmationsLeft *int64
	accessFrom *int64
	accessTo *int64
	status *int32
	statusTitle *string
	invalidRequestReason *int32
	currentConfirmationLevel *int32
	requiredConfirmersCountLevel2 *int32
	ticketingSystemPropertiesName *string
	ticketingSystemPropertiesNumber *string
	ticketingSystemPropertiesStatus *string
	additionalInfo *map[string]interface{}
	accountDetailsAccountID *string
	accountDetailsProperties *map[string]interface{}
	confirmers *[]map[string]interface{}
}

// The confirmation info.
func (r ApiIncomingRequestsConfirmRequestsRequest) ConfirmationInfo(confirmationInfo ConfirmRejectData) ApiIncomingRequestsConfirmRequestsRequest {
	r.confirmationInfo = &confirmationInfo
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) RequestorFullName(requestorFullName string) ApiIncomingRequestsConfirmRequestsRequest {
	r.requestorFullName = &requestorFullName
	return r
}

// The unique ID of the request to confirm.
func (r ApiIncomingRequestsConfirmRequestsRequest) RequestID2(requestID2 string) ApiIncomingRequestsConfirmRequestsRequest {
	r.requestID2 = &requestID2
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) SafeName(safeName string) ApiIncomingRequestsConfirmRequestsRequest {
	r.safeName = &safeName
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) RequestorUserName(requestorUserName string) ApiIncomingRequestsConfirmRequestsRequest {
	r.requestorUserName = &requestorUserName
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) RequestorReason(requestorReason string) ApiIncomingRequestsConfirmRequestsRequest {
	r.requestorReason = &requestorReason
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) UserReason(userReason string) ApiIncomingRequestsConfirmRequestsRequest {
	r.userReason = &userReason
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) CreationDate(creationDate int64) ApiIncomingRequestsConfirmRequestsRequest {
	r.creationDate = &creationDate
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) Operation(operation string) ApiIncomingRequestsConfirmRequestsRequest {
	r.operation = &operation
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) ExpirationDate(expirationDate int64) ApiIncomingRequestsConfirmRequestsRequest {
	r.expirationDate = &expirationDate
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) OperationType(operationType int32) ApiIncomingRequestsConfirmRequestsRequest {
	r.operationType = &operationType
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AccessType(accessType string) ApiIncomingRequestsConfirmRequestsRequest {
	r.accessType = &accessType
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) ConfirmationsLeft(confirmationsLeft int64) ApiIncomingRequestsConfirmRequestsRequest {
	r.confirmationsLeft = &confirmationsLeft
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AccessFrom(accessFrom int64) ApiIncomingRequestsConfirmRequestsRequest {
	r.accessFrom = &accessFrom
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AccessTo(accessTo int64) ApiIncomingRequestsConfirmRequestsRequest {
	r.accessTo = &accessTo
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) Status(status int32) ApiIncomingRequestsConfirmRequestsRequest {
	r.status = &status
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) StatusTitle(statusTitle string) ApiIncomingRequestsConfirmRequestsRequest {
	r.statusTitle = &statusTitle
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) InvalidRequestReason(invalidRequestReason int32) ApiIncomingRequestsConfirmRequestsRequest {
	r.invalidRequestReason = &invalidRequestReason
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) CurrentConfirmationLevel(currentConfirmationLevel int32) ApiIncomingRequestsConfirmRequestsRequest {
	r.currentConfirmationLevel = &currentConfirmationLevel
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) RequiredConfirmersCountLevel2(requiredConfirmersCountLevel2 int32) ApiIncomingRequestsConfirmRequestsRequest {
	r.requiredConfirmersCountLevel2 = &requiredConfirmersCountLevel2
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) TicketingSystemPropertiesName(ticketingSystemPropertiesName string) ApiIncomingRequestsConfirmRequestsRequest {
	r.ticketingSystemPropertiesName = &ticketingSystemPropertiesName
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) TicketingSystemPropertiesNumber(ticketingSystemPropertiesNumber string) ApiIncomingRequestsConfirmRequestsRequest {
	r.ticketingSystemPropertiesNumber = &ticketingSystemPropertiesNumber
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) TicketingSystemPropertiesStatus(ticketingSystemPropertiesStatus string) ApiIncomingRequestsConfirmRequestsRequest {
	r.ticketingSystemPropertiesStatus = &ticketingSystemPropertiesStatus
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AdditionalInfo(additionalInfo map[string]interface{}) ApiIncomingRequestsConfirmRequestsRequest {
	r.additionalInfo = &additionalInfo
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AccountDetailsAccountID(accountDetailsAccountID string) ApiIncomingRequestsConfirmRequestsRequest {
	r.accountDetailsAccountID = &accountDetailsAccountID
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) AccountDetailsProperties(accountDetailsProperties map[string]interface{}) ApiIncomingRequestsConfirmRequestsRequest {
	r.accountDetailsProperties = &accountDetailsProperties
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) Confirmers(confirmers []map[string]interface{}) ApiIncomingRequestsConfirmRequestsRequest {
	r.confirmers = &confirmers
	return r
}

func (r ApiIncomingRequestsConfirmRequestsRequest) Execute() (*http.Response, error) {
	return r.ApiService.IncomingRequestsConfirmRequestsExecute(r)
}

/*
IncomingRequestsConfirmRequests Method for IncomingRequestsConfirmRequests

This method enables a request confirmer to confirm a single request, identified by its request ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param requestID The unique ID of the request to confirm.
 @return ApiIncomingRequestsConfirmRequestsRequest
*/
func (a *IncomingRequestsApiService) IncomingRequestsConfirmRequests(ctx context.Context, requestID string) ApiIncomingRequestsConfirmRequestsRequest {
	return ApiIncomingRequestsConfirmRequestsRequest{
		ApiService: a,
		ctx: ctx,
		requestID: requestID,
	}
}

// Execute executes the request
func (a *IncomingRequestsApiService) IncomingRequestsConfirmRequestsExecute(r ApiIncomingRequestsConfirmRequestsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncomingRequestsApiService.IncomingRequestsConfirmRequests")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/IncomingRequests/{RequestID}/confirm"
	localVarPath = strings.Replace(localVarPath, "{"+"RequestID"+"}", url.PathEscape(parameterToString(r.requestID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.confirmationInfo == nil {
		return nil, reportError("confirmationInfo is required and must be specified")
	}

	if r.requestorFullName != nil {
		localVarQueryParams.Add("requestorFullName", parameterToString(*r.requestorFullName, ""))
	}
	if r.requestID2 != nil {
		localVarQueryParams.Add("requestID", parameterToString(*r.requestID2, ""))
	}
	if r.safeName != nil {
		localVarQueryParams.Add("safeName", parameterToString(*r.safeName, ""))
	}
	if r.requestorUserName != nil {
		localVarQueryParams.Add("requestorUserName", parameterToString(*r.requestorUserName, ""))
	}
	if r.requestorReason != nil {
		localVarQueryParams.Add("requestorReason", parameterToString(*r.requestorReason, ""))
	}
	if r.userReason != nil {
		localVarQueryParams.Add("userReason", parameterToString(*r.userReason, ""))
	}
	if r.creationDate != nil {
		localVarQueryParams.Add("creationDate", parameterToString(*r.creationDate, ""))
	}
	if r.operation != nil {
		localVarQueryParams.Add("operation", parameterToString(*r.operation, ""))
	}
	if r.expirationDate != nil {
		localVarQueryParams.Add("expirationDate", parameterToString(*r.expirationDate, ""))
	}
	if r.operationType != nil {
		localVarQueryParams.Add("operationType", parameterToString(*r.operationType, ""))
	}
	if r.accessType != nil {
		localVarQueryParams.Add("accessType", parameterToString(*r.accessType, ""))
	}
	if r.confirmationsLeft != nil {
		localVarQueryParams.Add("confirmationsLeft", parameterToString(*r.confirmationsLeft, ""))
	}
	if r.accessFrom != nil {
		localVarQueryParams.Add("accessFrom", parameterToString(*r.accessFrom, ""))
	}
	if r.accessTo != nil {
		localVarQueryParams.Add("accessTo", parameterToString(*r.accessTo, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.statusTitle != nil {
		localVarQueryParams.Add("statusTitle", parameterToString(*r.statusTitle, ""))
	}
	if r.invalidRequestReason != nil {
		localVarQueryParams.Add("invalidRequestReason", parameterToString(*r.invalidRequestReason, ""))
	}
	if r.currentConfirmationLevel != nil {
		localVarQueryParams.Add("currentConfirmationLevel", parameterToString(*r.currentConfirmationLevel, ""))
	}
	if r.requiredConfirmersCountLevel2 != nil {
		localVarQueryParams.Add("requiredConfirmersCountLevel2", parameterToString(*r.requiredConfirmersCountLevel2, ""))
	}
	if r.ticketingSystemPropertiesName != nil {
		localVarQueryParams.Add("ticketingSystemProperties.name", parameterToString(*r.ticketingSystemPropertiesName, ""))
	}
	if r.ticketingSystemPropertiesNumber != nil {
		localVarQueryParams.Add("ticketingSystemProperties.number", parameterToString(*r.ticketingSystemPropertiesNumber, ""))
	}
	if r.ticketingSystemPropertiesStatus != nil {
		localVarQueryParams.Add("ticketingSystemProperties.status", parameterToString(*r.ticketingSystemPropertiesStatus, ""))
	}
	if r.additionalInfo != nil {
		localVarQueryParams.Add("additionalInfo", parameterToString(*r.additionalInfo, ""))
	}
	if r.accountDetailsAccountID != nil {
		localVarQueryParams.Add("accountDetails.accountID", parameterToString(*r.accountDetailsAccountID, ""))
	}
	if r.accountDetailsProperties != nil {
		localVarQueryParams.Add("accountDetails.properties", parameterToString(*r.accountDetailsProperties, ""))
	}
	if r.confirmers != nil {
		t := *r.confirmers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("confirmers", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("confirmers", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.confirmationInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIncomingRequestsGetRequestRequest struct {
	ctx context.Context
	ApiService *IncomingRequestsApiService
	requestID string
	requestID2 *string
	safeName *string
	requestorUserName *string
	requestorReason *string
	userReason *string
	creationDate *int64
	operation *string
	expirationDate *int64
	operationType *int32
	accessType *string
	confirmationsLeft *int64
	accessFrom *int64
	accessTo *int64
	status *int32
	statusTitle *string
	invalidRequestReason *int32
	currentConfirmationLevel *int32
	requiredConfirmersCountLevel2 *int32
	ticketingSystemPropertiesName *string
	ticketingSystemPropertiesNumber *string
	ticketingSystemPropertiesStatus *string
	additionalInfo *map[string]interface{}
	accountDetailsAccountID *string
	accountDetailsProperties *map[string]interface{}
	confirmers *[]map[string]interface{}
}

// The unique ID of the request.
func (r ApiIncomingRequestsGetRequestRequest) RequestID2(requestID2 string) ApiIncomingRequestsGetRequestRequest {
	r.requestID2 = &requestID2
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) SafeName(safeName string) ApiIncomingRequestsGetRequestRequest {
	r.safeName = &safeName
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) RequestorUserName(requestorUserName string) ApiIncomingRequestsGetRequestRequest {
	r.requestorUserName = &requestorUserName
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) RequestorReason(requestorReason string) ApiIncomingRequestsGetRequestRequest {
	r.requestorReason = &requestorReason
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) UserReason(userReason string) ApiIncomingRequestsGetRequestRequest {
	r.userReason = &userReason
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) CreationDate(creationDate int64) ApiIncomingRequestsGetRequestRequest {
	r.creationDate = &creationDate
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) Operation(operation string) ApiIncomingRequestsGetRequestRequest {
	r.operation = &operation
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) ExpirationDate(expirationDate int64) ApiIncomingRequestsGetRequestRequest {
	r.expirationDate = &expirationDate
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) OperationType(operationType int32) ApiIncomingRequestsGetRequestRequest {
	r.operationType = &operationType
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AccessType(accessType string) ApiIncomingRequestsGetRequestRequest {
	r.accessType = &accessType
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) ConfirmationsLeft(confirmationsLeft int64) ApiIncomingRequestsGetRequestRequest {
	r.confirmationsLeft = &confirmationsLeft
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AccessFrom(accessFrom int64) ApiIncomingRequestsGetRequestRequest {
	r.accessFrom = &accessFrom
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AccessTo(accessTo int64) ApiIncomingRequestsGetRequestRequest {
	r.accessTo = &accessTo
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) Status(status int32) ApiIncomingRequestsGetRequestRequest {
	r.status = &status
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) StatusTitle(statusTitle string) ApiIncomingRequestsGetRequestRequest {
	r.statusTitle = &statusTitle
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) InvalidRequestReason(invalidRequestReason int32) ApiIncomingRequestsGetRequestRequest {
	r.invalidRequestReason = &invalidRequestReason
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) CurrentConfirmationLevel(currentConfirmationLevel int32) ApiIncomingRequestsGetRequestRequest {
	r.currentConfirmationLevel = &currentConfirmationLevel
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) RequiredConfirmersCountLevel2(requiredConfirmersCountLevel2 int32) ApiIncomingRequestsGetRequestRequest {
	r.requiredConfirmersCountLevel2 = &requiredConfirmersCountLevel2
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) TicketingSystemPropertiesName(ticketingSystemPropertiesName string) ApiIncomingRequestsGetRequestRequest {
	r.ticketingSystemPropertiesName = &ticketingSystemPropertiesName
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) TicketingSystemPropertiesNumber(ticketingSystemPropertiesNumber string) ApiIncomingRequestsGetRequestRequest {
	r.ticketingSystemPropertiesNumber = &ticketingSystemPropertiesNumber
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) TicketingSystemPropertiesStatus(ticketingSystemPropertiesStatus string) ApiIncomingRequestsGetRequestRequest {
	r.ticketingSystemPropertiesStatus = &ticketingSystemPropertiesStatus
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AdditionalInfo(additionalInfo map[string]interface{}) ApiIncomingRequestsGetRequestRequest {
	r.additionalInfo = &additionalInfo
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AccountDetailsAccountID(accountDetailsAccountID string) ApiIncomingRequestsGetRequestRequest {
	r.accountDetailsAccountID = &accountDetailsAccountID
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) AccountDetailsProperties(accountDetailsProperties map[string]interface{}) ApiIncomingRequestsGetRequestRequest {
	r.accountDetailsProperties = &accountDetailsProperties
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) Confirmers(confirmers []map[string]interface{}) ApiIncomingRequestsGetRequestRequest {
	r.confirmers = &confirmers
	return r
}

func (r ApiIncomingRequestsGetRequestRequest) Execute() (*IncomingRequest, *http.Response, error) {
	return r.ApiService.IncomingRequestsGetRequestExecute(r)
}

/*
IncomingRequestsGetRequest Method for IncomingRequestsGetRequest

This method returns details of a specific request in the Incoming Requests list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param requestID The unique ID of the request.
 @return ApiIncomingRequestsGetRequestRequest
*/
func (a *IncomingRequestsApiService) IncomingRequestsGetRequest(ctx context.Context, requestID string) ApiIncomingRequestsGetRequestRequest {
	return ApiIncomingRequestsGetRequestRequest{
		ApiService: a,
		ctx: ctx,
		requestID: requestID,
	}
}

// Execute executes the request
//  @return IncomingRequest
func (a *IncomingRequestsApiService) IncomingRequestsGetRequestExecute(r ApiIncomingRequestsGetRequestRequest) (*IncomingRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IncomingRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncomingRequestsApiService.IncomingRequestsGetRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/IncomingRequests/{RequestID}"
	localVarPath = strings.Replace(localVarPath, "{"+"RequestID"+"}", url.PathEscape(parameterToString(r.requestID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestID2 != nil {
		localVarQueryParams.Add("requestID", parameterToString(*r.requestID2, ""))
	}
	if r.safeName != nil {
		localVarQueryParams.Add("safeName", parameterToString(*r.safeName, ""))
	}
	if r.requestorUserName != nil {
		localVarQueryParams.Add("requestorUserName", parameterToString(*r.requestorUserName, ""))
	}
	if r.requestorReason != nil {
		localVarQueryParams.Add("requestorReason", parameterToString(*r.requestorReason, ""))
	}
	if r.userReason != nil {
		localVarQueryParams.Add("userReason", parameterToString(*r.userReason, ""))
	}
	if r.creationDate != nil {
		localVarQueryParams.Add("creationDate", parameterToString(*r.creationDate, ""))
	}
	if r.operation != nil {
		localVarQueryParams.Add("operation", parameterToString(*r.operation, ""))
	}
	if r.expirationDate != nil {
		localVarQueryParams.Add("expirationDate", parameterToString(*r.expirationDate, ""))
	}
	if r.operationType != nil {
		localVarQueryParams.Add("operationType", parameterToString(*r.operationType, ""))
	}
	if r.accessType != nil {
		localVarQueryParams.Add("accessType", parameterToString(*r.accessType, ""))
	}
	if r.confirmationsLeft != nil {
		localVarQueryParams.Add("confirmationsLeft", parameterToString(*r.confirmationsLeft, ""))
	}
	if r.accessFrom != nil {
		localVarQueryParams.Add("accessFrom", parameterToString(*r.accessFrom, ""))
	}
	if r.accessTo != nil {
		localVarQueryParams.Add("accessTo", parameterToString(*r.accessTo, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.statusTitle != nil {
		localVarQueryParams.Add("statusTitle", parameterToString(*r.statusTitle, ""))
	}
	if r.invalidRequestReason != nil {
		localVarQueryParams.Add("invalidRequestReason", parameterToString(*r.invalidRequestReason, ""))
	}
	if r.currentConfirmationLevel != nil {
		localVarQueryParams.Add("currentConfirmationLevel", parameterToString(*r.currentConfirmationLevel, ""))
	}
	if r.requiredConfirmersCountLevel2 != nil {
		localVarQueryParams.Add("requiredConfirmersCountLevel2", parameterToString(*r.requiredConfirmersCountLevel2, ""))
	}
	if r.ticketingSystemPropertiesName != nil {
		localVarQueryParams.Add("ticketingSystemProperties.name", parameterToString(*r.ticketingSystemPropertiesName, ""))
	}
	if r.ticketingSystemPropertiesNumber != nil {
		localVarQueryParams.Add("ticketingSystemProperties.number", parameterToString(*r.ticketingSystemPropertiesNumber, ""))
	}
	if r.ticketingSystemPropertiesStatus != nil {
		localVarQueryParams.Add("ticketingSystemProperties.status", parameterToString(*r.ticketingSystemPropertiesStatus, ""))
	}
	if r.additionalInfo != nil {
		localVarQueryParams.Add("additionalInfo", parameterToString(*r.additionalInfo, ""))
	}
	if r.accountDetailsAccountID != nil {
		localVarQueryParams.Add("accountDetails.accountID", parameterToString(*r.accountDetailsAccountID, ""))
	}
	if r.accountDetailsProperties != nil {
		localVarQueryParams.Add("accountDetails.properties", parameterToString(*r.accountDetailsProperties, ""))
	}
	if r.confirmers != nil {
		t := *r.confirmers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("confirmers", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("confirmers", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncomingRequestsGetRequestsRequest struct {
	ctx context.Context
	ApiService *IncomingRequestsApiService
	onlyWaiting *bool
	expired *bool
}

// Only requests waiting for approval will be listed.
func (r ApiIncomingRequestsGetRequestsRequest) OnlyWaiting(onlyWaiting bool) ApiIncomingRequestsGetRequestsRequest {
	r.onlyWaiting = &onlyWaiting
	return r
}

// Expired requests will be included in the list.
func (r ApiIncomingRequestsGetRequestsRequest) Expired(expired bool) ApiIncomingRequestsGetRequestsRequest {
	r.expired = &expired
	return r
}

func (r ApiIncomingRequestsGetRequestsRequest) Execute() (*IncomingRequest, *http.Response, error) {
	return r.ApiService.IncomingRequestsGetRequestsExecute(r)
}

/*
IncomingRequestsGetRequests Method for IncomingRequestsGetRequests

This method returns a list of all the requests for the confirmer to respond to.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIncomingRequestsGetRequestsRequest
*/
func (a *IncomingRequestsApiService) IncomingRequestsGetRequests(ctx context.Context) ApiIncomingRequestsGetRequestsRequest {
	return ApiIncomingRequestsGetRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IncomingRequest
func (a *IncomingRequestsApiService) IncomingRequestsGetRequestsExecute(r ApiIncomingRequestsGetRequestsRequest) (*IncomingRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IncomingRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncomingRequestsApiService.IncomingRequestsGetRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/IncomingRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.onlyWaiting != nil {
		localVarQueryParams.Add("onlyWaiting", parameterToString(*r.onlyWaiting, ""))
	}
	if r.expired != nil {
		localVarQueryParams.Add("expired", parameterToString(*r.expired, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/vnd.cyberark.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncomingRequestsRejectRequestsRequest struct {
	ctx context.Context
	ApiService *IncomingRequestsApiService
	requestID string
	rejectionInfo *ConfirmRejectData
	requestorFullName *string
	requestID2 *string
	safeName *string
	requestorUserName *string
	requestorReason *string
	userReason *string
	creationDate *int64
	operation *string
	expirationDate *int64
	operationType *int32
	accessType *string
	confirmationsLeft *int64
	accessFrom *int64
	accessTo *int64
	status *int32
	statusTitle *string
	invalidRequestReason *int32
	currentConfirmationLevel *int32
	requiredConfirmersCountLevel2 *int32
	ticketingSystemPropertiesName *string
	ticketingSystemPropertiesNumber *string
	ticketingSystemPropertiesStatus *string
	additionalInfo *map[string]interface{}
	accountDetailsAccountID *string
	accountDetailsProperties *map[string]interface{}
	confirmers *[]map[string]interface{}
}

// The confirmation info.
func (r ApiIncomingRequestsRejectRequestsRequest) RejectionInfo(rejectionInfo ConfirmRejectData) ApiIncomingRequestsRejectRequestsRequest {
	r.rejectionInfo = &rejectionInfo
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) RequestorFullName(requestorFullName string) ApiIncomingRequestsRejectRequestsRequest {
	r.requestorFullName = &requestorFullName
	return r
}

// The unique ID of the request to reject.
func (r ApiIncomingRequestsRejectRequestsRequest) RequestID2(requestID2 string) ApiIncomingRequestsRejectRequestsRequest {
	r.requestID2 = &requestID2
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) SafeName(safeName string) ApiIncomingRequestsRejectRequestsRequest {
	r.safeName = &safeName
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) RequestorUserName(requestorUserName string) ApiIncomingRequestsRejectRequestsRequest {
	r.requestorUserName = &requestorUserName
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) RequestorReason(requestorReason string) ApiIncomingRequestsRejectRequestsRequest {
	r.requestorReason = &requestorReason
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) UserReason(userReason string) ApiIncomingRequestsRejectRequestsRequest {
	r.userReason = &userReason
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) CreationDate(creationDate int64) ApiIncomingRequestsRejectRequestsRequest {
	r.creationDate = &creationDate
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) Operation(operation string) ApiIncomingRequestsRejectRequestsRequest {
	r.operation = &operation
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) ExpirationDate(expirationDate int64) ApiIncomingRequestsRejectRequestsRequest {
	r.expirationDate = &expirationDate
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) OperationType(operationType int32) ApiIncomingRequestsRejectRequestsRequest {
	r.operationType = &operationType
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AccessType(accessType string) ApiIncomingRequestsRejectRequestsRequest {
	r.accessType = &accessType
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) ConfirmationsLeft(confirmationsLeft int64) ApiIncomingRequestsRejectRequestsRequest {
	r.confirmationsLeft = &confirmationsLeft
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AccessFrom(accessFrom int64) ApiIncomingRequestsRejectRequestsRequest {
	r.accessFrom = &accessFrom
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AccessTo(accessTo int64) ApiIncomingRequestsRejectRequestsRequest {
	r.accessTo = &accessTo
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) Status(status int32) ApiIncomingRequestsRejectRequestsRequest {
	r.status = &status
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) StatusTitle(statusTitle string) ApiIncomingRequestsRejectRequestsRequest {
	r.statusTitle = &statusTitle
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) InvalidRequestReason(invalidRequestReason int32) ApiIncomingRequestsRejectRequestsRequest {
	r.invalidRequestReason = &invalidRequestReason
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) CurrentConfirmationLevel(currentConfirmationLevel int32) ApiIncomingRequestsRejectRequestsRequest {
	r.currentConfirmationLevel = &currentConfirmationLevel
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) RequiredConfirmersCountLevel2(requiredConfirmersCountLevel2 int32) ApiIncomingRequestsRejectRequestsRequest {
	r.requiredConfirmersCountLevel2 = &requiredConfirmersCountLevel2
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) TicketingSystemPropertiesName(ticketingSystemPropertiesName string) ApiIncomingRequestsRejectRequestsRequest {
	r.ticketingSystemPropertiesName = &ticketingSystemPropertiesName
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) TicketingSystemPropertiesNumber(ticketingSystemPropertiesNumber string) ApiIncomingRequestsRejectRequestsRequest {
	r.ticketingSystemPropertiesNumber = &ticketingSystemPropertiesNumber
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) TicketingSystemPropertiesStatus(ticketingSystemPropertiesStatus string) ApiIncomingRequestsRejectRequestsRequest {
	r.ticketingSystemPropertiesStatus = &ticketingSystemPropertiesStatus
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AdditionalInfo(additionalInfo map[string]interface{}) ApiIncomingRequestsRejectRequestsRequest {
	r.additionalInfo = &additionalInfo
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AccountDetailsAccountID(accountDetailsAccountID string) ApiIncomingRequestsRejectRequestsRequest {
	r.accountDetailsAccountID = &accountDetailsAccountID
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) AccountDetailsProperties(accountDetailsProperties map[string]interface{}) ApiIncomingRequestsRejectRequestsRequest {
	r.accountDetailsProperties = &accountDetailsProperties
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) Confirmers(confirmers []map[string]interface{}) ApiIncomingRequestsRejectRequestsRequest {
	r.confirmers = &confirmers
	return r
}

func (r ApiIncomingRequestsRejectRequestsRequest) Execute() (*http.Response, error) {
	return r.ApiService.IncomingRequestsRejectRequestsExecute(r)
}

/*
IncomingRequestsRejectRequests Method for IncomingRequestsRejectRequests

This method enables a request confirmer to reject a single request, identified by its request ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param requestID The unique ID of the request to reject.
 @return ApiIncomingRequestsRejectRequestsRequest
*/
func (a *IncomingRequestsApiService) IncomingRequestsRejectRequests(ctx context.Context, requestID string) ApiIncomingRequestsRejectRequestsRequest {
	return ApiIncomingRequestsRejectRequestsRequest{
		ApiService: a,
		ctx: ctx,
		requestID: requestID,
	}
}

// Execute executes the request
func (a *IncomingRequestsApiService) IncomingRequestsRejectRequestsExecute(r ApiIncomingRequestsRejectRequestsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncomingRequestsApiService.IncomingRequestsRejectRequests")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/IncomingRequests/{RequestID}/reject"
	localVarPath = strings.Replace(localVarPath, "{"+"RequestID"+"}", url.PathEscape(parameterToString(r.requestID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rejectionInfo == nil {
		return nil, reportError("rejectionInfo is required and must be specified")
	}

	if r.requestorFullName != nil {
		localVarQueryParams.Add("requestorFullName", parameterToString(*r.requestorFullName, ""))
	}
	if r.requestID2 != nil {
		localVarQueryParams.Add("requestID", parameterToString(*r.requestID2, ""))
	}
	if r.safeName != nil {
		localVarQueryParams.Add("safeName", parameterToString(*r.safeName, ""))
	}
	if r.requestorUserName != nil {
		localVarQueryParams.Add("requestorUserName", parameterToString(*r.requestorUserName, ""))
	}
	if r.requestorReason != nil {
		localVarQueryParams.Add("requestorReason", parameterToString(*r.requestorReason, ""))
	}
	if r.userReason != nil {
		localVarQueryParams.Add("userReason", parameterToString(*r.userReason, ""))
	}
	if r.creationDate != nil {
		localVarQueryParams.Add("creationDate", parameterToString(*r.creationDate, ""))
	}
	if r.operation != nil {
		localVarQueryParams.Add("operation", parameterToString(*r.operation, ""))
	}
	if r.expirationDate != nil {
		localVarQueryParams.Add("expirationDate", parameterToString(*r.expirationDate, ""))
	}
	if r.operationType != nil {
		localVarQueryParams.Add("operationType", parameterToString(*r.operationType, ""))
	}
	if r.accessType != nil {
		localVarQueryParams.Add("accessType", parameterToString(*r.accessType, ""))
	}
	if r.confirmationsLeft != nil {
		localVarQueryParams.Add("confirmationsLeft", parameterToString(*r.confirmationsLeft, ""))
	}
	if r.accessFrom != nil {
		localVarQueryParams.Add("accessFrom", parameterToString(*r.accessFrom, ""))
	}
	if r.accessTo != nil {
		localVarQueryParams.Add("accessTo", parameterToString(*r.accessTo, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.statusTitle != nil {
		localVarQueryParams.Add("statusTitle", parameterToString(*r.statusTitle, ""))
	}
	if r.invalidRequestReason != nil {
		localVarQueryParams.Add("invalidRequestReason", parameterToString(*r.invalidRequestReason, ""))
	}
	if r.currentConfirmationLevel != nil {
		localVarQueryParams.Add("currentConfirmationLevel", parameterToString(*r.currentConfirmationLevel, ""))
	}
	if r.requiredConfirmersCountLevel2 != nil {
		localVarQueryParams.Add("requiredConfirmersCountLevel2", parameterToString(*r.requiredConfirmersCountLevel2, ""))
	}
	if r.ticketingSystemPropertiesName != nil {
		localVarQueryParams.Add("ticketingSystemProperties.name", parameterToString(*r.ticketingSystemPropertiesName, ""))
	}
	if r.ticketingSystemPropertiesNumber != nil {
		localVarQueryParams.Add("ticketingSystemProperties.number", parameterToString(*r.ticketingSystemPropertiesNumber, ""))
	}
	if r.ticketingSystemPropertiesStatus != nil {
		localVarQueryParams.Add("ticketingSystemProperties.status", parameterToString(*r.ticketingSystemPropertiesStatus, ""))
	}
	if r.additionalInfo != nil {
		localVarQueryParams.Add("additionalInfo", parameterToString(*r.additionalInfo, ""))
	}
	if r.accountDetailsAccountID != nil {
		localVarQueryParams.Add("accountDetails.accountID", parameterToString(*r.accountDetailsAccountID, ""))
	}
	if r.accountDetailsProperties != nil {
		localVarQueryParams.Add("accountDetails.properties", parameterToString(*r.accountDetailsProperties, ""))
	}
	if r.confirmers != nil {
		t := *r.confirmers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("confirmers", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("confirmers", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rejectionInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
