/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllowedReferrerDto struct for AllowedReferrerDto
type AllowedReferrerDto struct {
	// The URL from where users will be able to access PVWA. You can specify either of the following:  A portal URL that allows access from any page or sub-directory under the companyâ€™s portal URL.  For example, https://CompanyA/portal/.  The exact name of a URL that only allows access from a specific page.For example, https://CompanyB/management/dashboard.
	ReferrerURL string `json:"referrerURL"`
	// Defines whether or not the URL is a regular expression.
	RegularExpression *bool `json:"regularExpression,omitempty"`
}

// NewAllowedReferrerDto instantiates a new AllowedReferrerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedReferrerDto(referrerURL string) *AllowedReferrerDto {
	this := AllowedReferrerDto{}
	this.ReferrerURL = referrerURL
	return &this
}

// NewAllowedReferrerDtoWithDefaults instantiates a new AllowedReferrerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedReferrerDtoWithDefaults() *AllowedReferrerDto {
	this := AllowedReferrerDto{}
	return &this
}

// GetReferrerURL returns the ReferrerURL field value
func (o *AllowedReferrerDto) GetReferrerURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferrerURL
}

// GetReferrerURLOk returns a tuple with the ReferrerURL field value
// and a boolean to check if the value has been set.
func (o *AllowedReferrerDto) GetReferrerURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferrerURL, true
}

// SetReferrerURL sets field value
func (o *AllowedReferrerDto) SetReferrerURL(v string) {
	o.ReferrerURL = v
}

// GetRegularExpression returns the RegularExpression field value if set, zero value otherwise.
func (o *AllowedReferrerDto) GetRegularExpression() bool {
	if o == nil || o.RegularExpression == nil {
		var ret bool
		return ret
	}
	return *o.RegularExpression
}

// GetRegularExpressionOk returns a tuple with the RegularExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedReferrerDto) GetRegularExpressionOk() (*bool, bool) {
	if o == nil || o.RegularExpression == nil {
		return nil, false
	}
	return o.RegularExpression, true
}

// HasRegularExpression returns a boolean if a field has been set.
func (o *AllowedReferrerDto) HasRegularExpression() bool {
	if o != nil && o.RegularExpression != nil {
		return true
	}

	return false
}

// SetRegularExpression gets a reference to the given bool and assigns it to the RegularExpression field.
func (o *AllowedReferrerDto) SetRegularExpression(v bool) {
	o.RegularExpression = &v
}

func (o AllowedReferrerDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["referrerURL"] = o.ReferrerURL
	}
	if o.RegularExpression != nil {
		toSerialize["regularExpression"] = o.RegularExpression
	}
	return json.Marshal(toSerialize)
}

type NullableAllowedReferrerDto struct {
	value *AllowedReferrerDto
	isSet bool
}

func (v NullableAllowedReferrerDto) Get() *AllowedReferrerDto {
	return v.value
}

func (v *NullableAllowedReferrerDto) Set(val *AllowedReferrerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedReferrerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedReferrerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedReferrerDto(val *AllowedReferrerDto) *NullableAllowedReferrerDto {
	return &NullableAllowedReferrerDto{value: val, isSet: true}
}

func (v NullableAllowedReferrerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedReferrerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


