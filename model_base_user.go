/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BaseUser struct for BaseUser
type BaseUser struct {
	// The unique id of the user.
	Id *int64 `json:"id,omitempty"`
	// The name of the user.
	Username string `json:"username"`
	// The source of the user.  Possible values: CyberArk, LDAP.
	Source *string `json:"source,omitempty"`
	// The type of the user.  Possible types could be any user types according to the license.
	UserType *string `json:"userType,omitempty"`
	// Whether the user is a known component or not.  Possible values: true (if it is component) or false otherwise.    The following user types are considered as components:      CPM      ENE      PVWA      PSM      AppProvider      OPMProvider      PIMProvider      PSMPServer      PSMPADBridge      PSMHTML5Gateway      CIFS      FTP      SFE      DCAInstance      FEWA      SEG
	ComponentUser *bool `json:"componentUser,omitempty"`
	// The security attributes and authorizations, contains:  AddSafe  AuditUsers  AddUpdateUsers  ResetUsersPasswords  ActivateUsers  AddNetworkAreas  ManageDirectoryMapping  ManageServerFileCategories  BackupAllSafes  RestoreAllSafes
	GroupsMembership []GroupMembershipDetails `json:"groupsMembership,omitempty"`
	// The distinguished name of the user. Only applies to LDAP users.
	UserDN *string `json:"userDN,omitempty"`
	VaultAuthorization []string `json:"vaultAuthorization,omitempty"`
	// The Vault Location.
	Location *string `json:"location,omitempty"`
	PersonalDetails *BaseUserPersonalDetails `json:"personalDetails,omitempty"`
	// Whether or not the user is enabled.
	EnableUser *bool `json:"enableUser,omitempty"`
	// Whether or not the user is suspended due to maximum violations.
	Suspended *bool `json:"suspended,omitempty"`
}

// NewBaseUser instantiates a new BaseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseUser(username string) *BaseUser {
	this := BaseUser{}
	this.Username = username
	return &this
}

// NewBaseUserWithDefaults instantiates a new BaseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseUserWithDefaults() *BaseUser {
	this := BaseUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseUser) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BaseUser) SetId(v int64) {
	o.Id = &v
}

// GetUsername returns the Username field value
func (o *BaseUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *BaseUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *BaseUser) SetUsername(v string) {
	o.Username = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BaseUser) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *BaseUser) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *BaseUser) SetSource(v string) {
	o.Source = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *BaseUser) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *BaseUser) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *BaseUser) SetUserType(v string) {
	o.UserType = &v
}

// GetComponentUser returns the ComponentUser field value if set, zero value otherwise.
func (o *BaseUser) GetComponentUser() bool {
	if o == nil || o.ComponentUser == nil {
		var ret bool
		return ret
	}
	return *o.ComponentUser
}

// GetComponentUserOk returns a tuple with the ComponentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetComponentUserOk() (*bool, bool) {
	if o == nil || o.ComponentUser == nil {
		return nil, false
	}
	return o.ComponentUser, true
}

// HasComponentUser returns a boolean if a field has been set.
func (o *BaseUser) HasComponentUser() bool {
	if o != nil && o.ComponentUser != nil {
		return true
	}

	return false
}

// SetComponentUser gets a reference to the given bool and assigns it to the ComponentUser field.
func (o *BaseUser) SetComponentUser(v bool) {
	o.ComponentUser = &v
}

// GetGroupsMembership returns the GroupsMembership field value if set, zero value otherwise.
func (o *BaseUser) GetGroupsMembership() []GroupMembershipDetails {
	if o == nil || o.GroupsMembership == nil {
		var ret []GroupMembershipDetails
		return ret
	}
	return o.GroupsMembership
}

// GetGroupsMembershipOk returns a tuple with the GroupsMembership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetGroupsMembershipOk() ([]GroupMembershipDetails, bool) {
	if o == nil || o.GroupsMembership == nil {
		return nil, false
	}
	return o.GroupsMembership, true
}

// HasGroupsMembership returns a boolean if a field has been set.
func (o *BaseUser) HasGroupsMembership() bool {
	if o != nil && o.GroupsMembership != nil {
		return true
	}

	return false
}

// SetGroupsMembership gets a reference to the given []GroupMembershipDetails and assigns it to the GroupsMembership field.
func (o *BaseUser) SetGroupsMembership(v []GroupMembershipDetails) {
	o.GroupsMembership = v
}

// GetUserDN returns the UserDN field value if set, zero value otherwise.
func (o *BaseUser) GetUserDN() string {
	if o == nil || o.UserDN == nil {
		var ret string
		return ret
	}
	return *o.UserDN
}

// GetUserDNOk returns a tuple with the UserDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetUserDNOk() (*string, bool) {
	if o == nil || o.UserDN == nil {
		return nil, false
	}
	return o.UserDN, true
}

// HasUserDN returns a boolean if a field has been set.
func (o *BaseUser) HasUserDN() bool {
	if o != nil && o.UserDN != nil {
		return true
	}

	return false
}

// SetUserDN gets a reference to the given string and assigns it to the UserDN field.
func (o *BaseUser) SetUserDN(v string) {
	o.UserDN = &v
}

// GetVaultAuthorization returns the VaultAuthorization field value if set, zero value otherwise.
func (o *BaseUser) GetVaultAuthorization() []string {
	if o == nil || o.VaultAuthorization == nil {
		var ret []string
		return ret
	}
	return o.VaultAuthorization
}

// GetVaultAuthorizationOk returns a tuple with the VaultAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetVaultAuthorizationOk() ([]string, bool) {
	if o == nil || o.VaultAuthorization == nil {
		return nil, false
	}
	return o.VaultAuthorization, true
}

// HasVaultAuthorization returns a boolean if a field has been set.
func (o *BaseUser) HasVaultAuthorization() bool {
	if o != nil && o.VaultAuthorization != nil {
		return true
	}

	return false
}

// SetVaultAuthorization gets a reference to the given []string and assigns it to the VaultAuthorization field.
func (o *BaseUser) SetVaultAuthorization(v []string) {
	o.VaultAuthorization = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *BaseUser) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *BaseUser) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *BaseUser) SetLocation(v string) {
	o.Location = &v
}

// GetPersonalDetails returns the PersonalDetails field value if set, zero value otherwise.
func (o *BaseUser) GetPersonalDetails() BaseUserPersonalDetails {
	if o == nil || o.PersonalDetails == nil {
		var ret BaseUserPersonalDetails
		return ret
	}
	return *o.PersonalDetails
}

// GetPersonalDetailsOk returns a tuple with the PersonalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetPersonalDetailsOk() (*BaseUserPersonalDetails, bool) {
	if o == nil || o.PersonalDetails == nil {
		return nil, false
	}
	return o.PersonalDetails, true
}

// HasPersonalDetails returns a boolean if a field has been set.
func (o *BaseUser) HasPersonalDetails() bool {
	if o != nil && o.PersonalDetails != nil {
		return true
	}

	return false
}

// SetPersonalDetails gets a reference to the given BaseUserPersonalDetails and assigns it to the PersonalDetails field.
func (o *BaseUser) SetPersonalDetails(v BaseUserPersonalDetails) {
	o.PersonalDetails = &v
}

// GetEnableUser returns the EnableUser field value if set, zero value otherwise.
func (o *BaseUser) GetEnableUser() bool {
	if o == nil || o.EnableUser == nil {
		var ret bool
		return ret
	}
	return *o.EnableUser
}

// GetEnableUserOk returns a tuple with the EnableUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetEnableUserOk() (*bool, bool) {
	if o == nil || o.EnableUser == nil {
		return nil, false
	}
	return o.EnableUser, true
}

// HasEnableUser returns a boolean if a field has been set.
func (o *BaseUser) HasEnableUser() bool {
	if o != nil && o.EnableUser != nil {
		return true
	}

	return false
}

// SetEnableUser gets a reference to the given bool and assigns it to the EnableUser field.
func (o *BaseUser) SetEnableUser(v bool) {
	o.EnableUser = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *BaseUser) GetSuspended() bool {
	if o == nil || o.Suspended == nil {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUser) GetSuspendedOk() (*bool, bool) {
	if o == nil || o.Suspended == nil {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *BaseUser) HasSuspended() bool {
	if o != nil && o.Suspended != nil {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *BaseUser) SetSuspended(v bool) {
	o.Suspended = &v
}

func (o BaseUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.UserType != nil {
		toSerialize["userType"] = o.UserType
	}
	if o.ComponentUser != nil {
		toSerialize["componentUser"] = o.ComponentUser
	}
	if o.GroupsMembership != nil {
		toSerialize["groupsMembership"] = o.GroupsMembership
	}
	if o.UserDN != nil {
		toSerialize["userDN"] = o.UserDN
	}
	if o.VaultAuthorization != nil {
		toSerialize["vaultAuthorization"] = o.VaultAuthorization
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.PersonalDetails != nil {
		toSerialize["personalDetails"] = o.PersonalDetails
	}
	if o.EnableUser != nil {
		toSerialize["enableUser"] = o.EnableUser
	}
	if o.Suspended != nil {
		toSerialize["suspended"] = o.Suspended
	}
	return json.Marshal(toSerialize)
}

type NullableBaseUser struct {
	value *BaseUser
	isSet bool
}

func (v NullableBaseUser) Get() *BaseUser {
	return v.value
}

func (v *NullableBaseUser) Set(val *BaseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseUser(val *BaseUser) *NullableBaseUser {
	return &NullableBaseUser{value: val, isSet: true}
}

func (v NullableBaseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


