/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BaseUserGroup struct for BaseUserGroup
type BaseUserGroup struct {
	// The name of a group in the Vault.
	GroupName string `json:"groupName"`
	// The description of the group.
	Description *string `json:"description,omitempty"`
	// The location of the group in the Vaultâ€™s hierarchy.
	Location *string `json:"location,omitempty"`
}

// NewBaseUserGroup instantiates a new BaseUserGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseUserGroup(groupName string) *BaseUserGroup {
	this := BaseUserGroup{}
	this.GroupName = groupName
	return &this
}

// NewBaseUserGroupWithDefaults instantiates a new BaseUserGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseUserGroupWithDefaults() *BaseUserGroup {
	this := BaseUserGroup{}
	return &this
}

// GetGroupName returns the GroupName field value
func (o *BaseUserGroup) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *BaseUserGroup) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *BaseUserGroup) SetGroupName(v string) {
	o.GroupName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseUserGroup) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUserGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseUserGroup) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseUserGroup) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *BaseUserGroup) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUserGroup) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *BaseUserGroup) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *BaseUserGroup) SetLocation(v string) {
	o.Location = &v
}

func (o BaseUserGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["groupName"] = o.GroupName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableBaseUserGroup struct {
	value *BaseUserGroup
	isSet bool
}

func (v NullableBaseUserGroup) Get() *BaseUserGroup {
	return v.value
}

func (v *NullableBaseUserGroup) Set(val *BaseUserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseUserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseUserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseUserGroup(val *BaseUserGroup) *NullableBaseUserGroup {
	return &NullableBaseUserGroup{value: val, isSet: true}
}

func (v NullableBaseUserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseUserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


