/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BaseUsersFilters struct for BaseUsersFilters
type BaseUsersFilters struct {
	// The type of the user.
	UserType *string `json:"userType,omitempty"`
	// Whether the user is a known component or not.
	ComponentUser *bool `json:"componentUser,omitempty"`
}

// NewBaseUsersFilters instantiates a new BaseUsersFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseUsersFilters() *BaseUsersFilters {
	this := BaseUsersFilters{}
	return &this
}

// NewBaseUsersFiltersWithDefaults instantiates a new BaseUsersFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseUsersFiltersWithDefaults() *BaseUsersFilters {
	this := BaseUsersFilters{}
	return &this
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *BaseUsersFilters) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUsersFilters) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *BaseUsersFilters) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *BaseUsersFilters) SetUserType(v string) {
	o.UserType = &v
}

// GetComponentUser returns the ComponentUser field value if set, zero value otherwise.
func (o *BaseUsersFilters) GetComponentUser() bool {
	if o == nil || o.ComponentUser == nil {
		var ret bool
		return ret
	}
	return *o.ComponentUser
}

// GetComponentUserOk returns a tuple with the ComponentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseUsersFilters) GetComponentUserOk() (*bool, bool) {
	if o == nil || o.ComponentUser == nil {
		return nil, false
	}
	return o.ComponentUser, true
}

// HasComponentUser returns a boolean if a field has been set.
func (o *BaseUsersFilters) HasComponentUser() bool {
	if o != nil && o.ComponentUser != nil {
		return true
	}

	return false
}

// SetComponentUser gets a reference to the given bool and assigns it to the ComponentUser field.
func (o *BaseUsersFilters) SetComponentUser(v bool) {
	o.ComponentUser = &v
}

func (o BaseUsersFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserType != nil {
		toSerialize["userType"] = o.UserType
	}
	if o.ComponentUser != nil {
		toSerialize["componentUser"] = o.ComponentUser
	}
	return json.Marshal(toSerialize)
}

type NullableBaseUsersFilters struct {
	value *BaseUsersFilters
	isSet bool
}

func (v NullableBaseUsersFilters) Get() *BaseUsersFilters {
	return v.value
}

func (v *NullableBaseUsersFilters) Set(val *BaseUsersFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseUsersFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseUsersFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseUsersFilters(val *BaseUsersFilters) *NullableBaseUsersFilters {
	return &NullableBaseUsersFilters{value: val, isSet: true}
}

func (v NullableBaseUsersFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseUsersFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


