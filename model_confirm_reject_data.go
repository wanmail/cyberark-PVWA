/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfirmRejectData struct for ConfirmRejectData
type ConfirmRejectData struct {
	// The confirmer's reason for confirming\\rejecting this request.
	Reason *string `json:"Reason,omitempty"`
}

// NewConfirmRejectData instantiates a new ConfirmRejectData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmRejectData() *ConfirmRejectData {
	this := ConfirmRejectData{}
	return &this
}

// NewConfirmRejectDataWithDefaults instantiates a new ConfirmRejectData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmRejectDataWithDefaults() *ConfirmRejectData {
	this := ConfirmRejectData{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ConfirmRejectData) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfirmRejectData) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ConfirmRejectData) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ConfirmRejectData) SetReason(v string) {
	o.Reason = &v
}

func (o ConfirmRejectData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["Reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableConfirmRejectData struct {
	value *ConfirmRejectData
	isSet bool
}

func (v NullableConfirmRejectData) Get() *ConfirmRejectData {
	return v.value
}

func (v *NullableConfirmRejectData) Set(val *ConfirmRejectData) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmRejectData) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmRejectData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmRejectData(val *ConfirmRejectData) *NullableConfirmRejectData {
	return &NullableConfirmRejectData{value: val, isSet: true}
}

func (v NullableConfirmRejectData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmRejectData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


