/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CredentialsManagement struct for CredentialsManagement
type CredentialsManagement struct {
	// A list of safes (regular expression) to which this platform can be applied
	AllowedSafes *string `json:"allowedSafes,omitempty"`
	// Indicates whether a 'Change now' process can be initiated manually. valid values: true\\false
	AllowManualChange *bool `json:"allowManualChange,omitempty"`
	// Indicates whether accounts related to this platform will be changed periodically. valid values: true\\false
	PerformPeriodicChange *bool `json:"performPeriodicChange,omitempty"`
	// The number of days between each periodic change.
	RequirePasswordChangeEveryXDays *int32 `json:"requirePasswordChangeEveryXDays,omitempty"`
	// Indicates whether a 'Verify now' process can be initiated manually. valid values: true\\false
	AllowManualVerification *bool `json:"allowManualVerification,omitempty"`
	// Indicates whether accounts related to this platform will be verified periodically. valid values: true\\false
	PerformPeriodicVerification *bool `json:"performPeriodicVerification,omitempty"`
	// The number of days between each periodic verification.
	RequirePasswordVerificationEveryXDays *int32 `json:"requirePasswordVerificationEveryXDays,omitempty"`
	// Indicates whether a 'Reconcile now' process can be initiated manually. valid values: true\\false
	AllowManualReconciliation *bool `json:"allowManualReconciliation,omitempty"`
	// Whether or not passwords will be reconciled automatically after the CPM detects a password on a remote machine  that is not synchronized with its corresponding password in the Server.valid values: true\\false
	AutomaticReconcileWhenUnsynched *bool `json:"automaticReconcileWhenUnsynched,omitempty"`
}

// NewCredentialsManagement instantiates a new CredentialsManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialsManagement() *CredentialsManagement {
	this := CredentialsManagement{}
	return &this
}

// NewCredentialsManagementWithDefaults instantiates a new CredentialsManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialsManagementWithDefaults() *CredentialsManagement {
	this := CredentialsManagement{}
	return &this
}

// GetAllowedSafes returns the AllowedSafes field value if set, zero value otherwise.
func (o *CredentialsManagement) GetAllowedSafes() string {
	if o == nil || o.AllowedSafes == nil {
		var ret string
		return ret
	}
	return *o.AllowedSafes
}

// GetAllowedSafesOk returns a tuple with the AllowedSafes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetAllowedSafesOk() (*string, bool) {
	if o == nil || o.AllowedSafes == nil {
		return nil, false
	}
	return o.AllowedSafes, true
}

// HasAllowedSafes returns a boolean if a field has been set.
func (o *CredentialsManagement) HasAllowedSafes() bool {
	if o != nil && o.AllowedSafes != nil {
		return true
	}

	return false
}

// SetAllowedSafes gets a reference to the given string and assigns it to the AllowedSafes field.
func (o *CredentialsManagement) SetAllowedSafes(v string) {
	o.AllowedSafes = &v
}

// GetAllowManualChange returns the AllowManualChange field value if set, zero value otherwise.
func (o *CredentialsManagement) GetAllowManualChange() bool {
	if o == nil || o.AllowManualChange == nil {
		var ret bool
		return ret
	}
	return *o.AllowManualChange
}

// GetAllowManualChangeOk returns a tuple with the AllowManualChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetAllowManualChangeOk() (*bool, bool) {
	if o == nil || o.AllowManualChange == nil {
		return nil, false
	}
	return o.AllowManualChange, true
}

// HasAllowManualChange returns a boolean if a field has been set.
func (o *CredentialsManagement) HasAllowManualChange() bool {
	if o != nil && o.AllowManualChange != nil {
		return true
	}

	return false
}

// SetAllowManualChange gets a reference to the given bool and assigns it to the AllowManualChange field.
func (o *CredentialsManagement) SetAllowManualChange(v bool) {
	o.AllowManualChange = &v
}

// GetPerformPeriodicChange returns the PerformPeriodicChange field value if set, zero value otherwise.
func (o *CredentialsManagement) GetPerformPeriodicChange() bool {
	if o == nil || o.PerformPeriodicChange == nil {
		var ret bool
		return ret
	}
	return *o.PerformPeriodicChange
}

// GetPerformPeriodicChangeOk returns a tuple with the PerformPeriodicChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetPerformPeriodicChangeOk() (*bool, bool) {
	if o == nil || o.PerformPeriodicChange == nil {
		return nil, false
	}
	return o.PerformPeriodicChange, true
}

// HasPerformPeriodicChange returns a boolean if a field has been set.
func (o *CredentialsManagement) HasPerformPeriodicChange() bool {
	if o != nil && o.PerformPeriodicChange != nil {
		return true
	}

	return false
}

// SetPerformPeriodicChange gets a reference to the given bool and assigns it to the PerformPeriodicChange field.
func (o *CredentialsManagement) SetPerformPeriodicChange(v bool) {
	o.PerformPeriodicChange = &v
}

// GetRequirePasswordChangeEveryXDays returns the RequirePasswordChangeEveryXDays field value if set, zero value otherwise.
func (o *CredentialsManagement) GetRequirePasswordChangeEveryXDays() int32 {
	if o == nil || o.RequirePasswordChangeEveryXDays == nil {
		var ret int32
		return ret
	}
	return *o.RequirePasswordChangeEveryXDays
}

// GetRequirePasswordChangeEveryXDaysOk returns a tuple with the RequirePasswordChangeEveryXDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetRequirePasswordChangeEveryXDaysOk() (*int32, bool) {
	if o == nil || o.RequirePasswordChangeEveryXDays == nil {
		return nil, false
	}
	return o.RequirePasswordChangeEveryXDays, true
}

// HasRequirePasswordChangeEveryXDays returns a boolean if a field has been set.
func (o *CredentialsManagement) HasRequirePasswordChangeEveryXDays() bool {
	if o != nil && o.RequirePasswordChangeEveryXDays != nil {
		return true
	}

	return false
}

// SetRequirePasswordChangeEveryXDays gets a reference to the given int32 and assigns it to the RequirePasswordChangeEveryXDays field.
func (o *CredentialsManagement) SetRequirePasswordChangeEveryXDays(v int32) {
	o.RequirePasswordChangeEveryXDays = &v
}

// GetAllowManualVerification returns the AllowManualVerification field value if set, zero value otherwise.
func (o *CredentialsManagement) GetAllowManualVerification() bool {
	if o == nil || o.AllowManualVerification == nil {
		var ret bool
		return ret
	}
	return *o.AllowManualVerification
}

// GetAllowManualVerificationOk returns a tuple with the AllowManualVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetAllowManualVerificationOk() (*bool, bool) {
	if o == nil || o.AllowManualVerification == nil {
		return nil, false
	}
	return o.AllowManualVerification, true
}

// HasAllowManualVerification returns a boolean if a field has been set.
func (o *CredentialsManagement) HasAllowManualVerification() bool {
	if o != nil && o.AllowManualVerification != nil {
		return true
	}

	return false
}

// SetAllowManualVerification gets a reference to the given bool and assigns it to the AllowManualVerification field.
func (o *CredentialsManagement) SetAllowManualVerification(v bool) {
	o.AllowManualVerification = &v
}

// GetPerformPeriodicVerification returns the PerformPeriodicVerification field value if set, zero value otherwise.
func (o *CredentialsManagement) GetPerformPeriodicVerification() bool {
	if o == nil || o.PerformPeriodicVerification == nil {
		var ret bool
		return ret
	}
	return *o.PerformPeriodicVerification
}

// GetPerformPeriodicVerificationOk returns a tuple with the PerformPeriodicVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetPerformPeriodicVerificationOk() (*bool, bool) {
	if o == nil || o.PerformPeriodicVerification == nil {
		return nil, false
	}
	return o.PerformPeriodicVerification, true
}

// HasPerformPeriodicVerification returns a boolean if a field has been set.
func (o *CredentialsManagement) HasPerformPeriodicVerification() bool {
	if o != nil && o.PerformPeriodicVerification != nil {
		return true
	}

	return false
}

// SetPerformPeriodicVerification gets a reference to the given bool and assigns it to the PerformPeriodicVerification field.
func (o *CredentialsManagement) SetPerformPeriodicVerification(v bool) {
	o.PerformPeriodicVerification = &v
}

// GetRequirePasswordVerificationEveryXDays returns the RequirePasswordVerificationEveryXDays field value if set, zero value otherwise.
func (o *CredentialsManagement) GetRequirePasswordVerificationEveryXDays() int32 {
	if o == nil || o.RequirePasswordVerificationEveryXDays == nil {
		var ret int32
		return ret
	}
	return *o.RequirePasswordVerificationEveryXDays
}

// GetRequirePasswordVerificationEveryXDaysOk returns a tuple with the RequirePasswordVerificationEveryXDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetRequirePasswordVerificationEveryXDaysOk() (*int32, bool) {
	if o == nil || o.RequirePasswordVerificationEveryXDays == nil {
		return nil, false
	}
	return o.RequirePasswordVerificationEveryXDays, true
}

// HasRequirePasswordVerificationEveryXDays returns a boolean if a field has been set.
func (o *CredentialsManagement) HasRequirePasswordVerificationEveryXDays() bool {
	if o != nil && o.RequirePasswordVerificationEveryXDays != nil {
		return true
	}

	return false
}

// SetRequirePasswordVerificationEveryXDays gets a reference to the given int32 and assigns it to the RequirePasswordVerificationEveryXDays field.
func (o *CredentialsManagement) SetRequirePasswordVerificationEveryXDays(v int32) {
	o.RequirePasswordVerificationEveryXDays = &v
}

// GetAllowManualReconciliation returns the AllowManualReconciliation field value if set, zero value otherwise.
func (o *CredentialsManagement) GetAllowManualReconciliation() bool {
	if o == nil || o.AllowManualReconciliation == nil {
		var ret bool
		return ret
	}
	return *o.AllowManualReconciliation
}

// GetAllowManualReconciliationOk returns a tuple with the AllowManualReconciliation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetAllowManualReconciliationOk() (*bool, bool) {
	if o == nil || o.AllowManualReconciliation == nil {
		return nil, false
	}
	return o.AllowManualReconciliation, true
}

// HasAllowManualReconciliation returns a boolean if a field has been set.
func (o *CredentialsManagement) HasAllowManualReconciliation() bool {
	if o != nil && o.AllowManualReconciliation != nil {
		return true
	}

	return false
}

// SetAllowManualReconciliation gets a reference to the given bool and assigns it to the AllowManualReconciliation field.
func (o *CredentialsManagement) SetAllowManualReconciliation(v bool) {
	o.AllowManualReconciliation = &v
}

// GetAutomaticReconcileWhenUnsynched returns the AutomaticReconcileWhenUnsynched field value if set, zero value otherwise.
func (o *CredentialsManagement) GetAutomaticReconcileWhenUnsynched() bool {
	if o == nil || o.AutomaticReconcileWhenUnsynched == nil {
		var ret bool
		return ret
	}
	return *o.AutomaticReconcileWhenUnsynched
}

// GetAutomaticReconcileWhenUnsynchedOk returns a tuple with the AutomaticReconcileWhenUnsynched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagement) GetAutomaticReconcileWhenUnsynchedOk() (*bool, bool) {
	if o == nil || o.AutomaticReconcileWhenUnsynched == nil {
		return nil, false
	}
	return o.AutomaticReconcileWhenUnsynched, true
}

// HasAutomaticReconcileWhenUnsynched returns a boolean if a field has been set.
func (o *CredentialsManagement) HasAutomaticReconcileWhenUnsynched() bool {
	if o != nil && o.AutomaticReconcileWhenUnsynched != nil {
		return true
	}

	return false
}

// SetAutomaticReconcileWhenUnsynched gets a reference to the given bool and assigns it to the AutomaticReconcileWhenUnsynched field.
func (o *CredentialsManagement) SetAutomaticReconcileWhenUnsynched(v bool) {
	o.AutomaticReconcileWhenUnsynched = &v
}

func (o CredentialsManagement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedSafes != nil {
		toSerialize["allowedSafes"] = o.AllowedSafes
	}
	if o.AllowManualChange != nil {
		toSerialize["allowManualChange"] = o.AllowManualChange
	}
	if o.PerformPeriodicChange != nil {
		toSerialize["performPeriodicChange"] = o.PerformPeriodicChange
	}
	if o.RequirePasswordChangeEveryXDays != nil {
		toSerialize["requirePasswordChangeEveryXDays"] = o.RequirePasswordChangeEveryXDays
	}
	if o.AllowManualVerification != nil {
		toSerialize["allowManualVerification"] = o.AllowManualVerification
	}
	if o.PerformPeriodicVerification != nil {
		toSerialize["performPeriodicVerification"] = o.PerformPeriodicVerification
	}
	if o.RequirePasswordVerificationEveryXDays != nil {
		toSerialize["requirePasswordVerificationEveryXDays"] = o.RequirePasswordVerificationEveryXDays
	}
	if o.AllowManualReconciliation != nil {
		toSerialize["allowManualReconciliation"] = o.AllowManualReconciliation
	}
	if o.AutomaticReconcileWhenUnsynched != nil {
		toSerialize["automaticReconcileWhenUnsynched"] = o.AutomaticReconcileWhenUnsynched
	}
	return json.Marshal(toSerialize)
}

type NullableCredentialsManagement struct {
	value *CredentialsManagement
	isSet bool
}

func (v NullableCredentialsManagement) Get() *CredentialsManagement {
	return v.value
}

func (v *NullableCredentialsManagement) Set(val *CredentialsManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsManagement(val *CredentialsManagement) *NullableCredentialsManagement {
	return &NullableCredentialsManagement{value: val, isSet: true}
}

func (v NullableCredentialsManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


