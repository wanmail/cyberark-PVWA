/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CredentialsManagementPolicy struct for CredentialsManagementPolicy
type CredentialsManagementPolicy struct {
	Verification *TaskRole `json:"Verification,omitempty"`
	Change *TaskRole `json:"Change,omitempty"`
	Reconcile *ReconcileTask `json:"Reconcile,omitempty"`
	SecretUpdateConfiguration *SecretUpdateConfiguration `json:"SecretUpdateConfiguration,omitempty"`
}

// NewCredentialsManagementPolicy instantiates a new CredentialsManagementPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialsManagementPolicy() *CredentialsManagementPolicy {
	this := CredentialsManagementPolicy{}
	return &this
}

// NewCredentialsManagementPolicyWithDefaults instantiates a new CredentialsManagementPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialsManagementPolicyWithDefaults() *CredentialsManagementPolicy {
	this := CredentialsManagementPolicy{}
	return &this
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *CredentialsManagementPolicy) GetVerification() TaskRole {
	if o == nil || o.Verification == nil {
		var ret TaskRole
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagementPolicy) GetVerificationOk() (*TaskRole, bool) {
	if o == nil || o.Verification == nil {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *CredentialsManagementPolicy) HasVerification() bool {
	if o != nil && o.Verification != nil {
		return true
	}

	return false
}

// SetVerification gets a reference to the given TaskRole and assigns it to the Verification field.
func (o *CredentialsManagementPolicy) SetVerification(v TaskRole) {
	o.Verification = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *CredentialsManagementPolicy) GetChange() TaskRole {
	if o == nil || o.Change == nil {
		var ret TaskRole
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagementPolicy) GetChangeOk() (*TaskRole, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *CredentialsManagementPolicy) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given TaskRole and assigns it to the Change field.
func (o *CredentialsManagementPolicy) SetChange(v TaskRole) {
	o.Change = &v
}

// GetReconcile returns the Reconcile field value if set, zero value otherwise.
func (o *CredentialsManagementPolicy) GetReconcile() ReconcileTask {
	if o == nil || o.Reconcile == nil {
		var ret ReconcileTask
		return ret
	}
	return *o.Reconcile
}

// GetReconcileOk returns a tuple with the Reconcile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagementPolicy) GetReconcileOk() (*ReconcileTask, bool) {
	if o == nil || o.Reconcile == nil {
		return nil, false
	}
	return o.Reconcile, true
}

// HasReconcile returns a boolean if a field has been set.
func (o *CredentialsManagementPolicy) HasReconcile() bool {
	if o != nil && o.Reconcile != nil {
		return true
	}

	return false
}

// SetReconcile gets a reference to the given ReconcileTask and assigns it to the Reconcile field.
func (o *CredentialsManagementPolicy) SetReconcile(v ReconcileTask) {
	o.Reconcile = &v
}

// GetSecretUpdateConfiguration returns the SecretUpdateConfiguration field value if set, zero value otherwise.
func (o *CredentialsManagementPolicy) GetSecretUpdateConfiguration() SecretUpdateConfiguration {
	if o == nil || o.SecretUpdateConfiguration == nil {
		var ret SecretUpdateConfiguration
		return ret
	}
	return *o.SecretUpdateConfiguration
}

// GetSecretUpdateConfigurationOk returns a tuple with the SecretUpdateConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsManagementPolicy) GetSecretUpdateConfigurationOk() (*SecretUpdateConfiguration, bool) {
	if o == nil || o.SecretUpdateConfiguration == nil {
		return nil, false
	}
	return o.SecretUpdateConfiguration, true
}

// HasSecretUpdateConfiguration returns a boolean if a field has been set.
func (o *CredentialsManagementPolicy) HasSecretUpdateConfiguration() bool {
	if o != nil && o.SecretUpdateConfiguration != nil {
		return true
	}

	return false
}

// SetSecretUpdateConfiguration gets a reference to the given SecretUpdateConfiguration and assigns it to the SecretUpdateConfiguration field.
func (o *CredentialsManagementPolicy) SetSecretUpdateConfiguration(v SecretUpdateConfiguration) {
	o.SecretUpdateConfiguration = &v
}

func (o CredentialsManagementPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Verification != nil {
		toSerialize["Verification"] = o.Verification
	}
	if o.Change != nil {
		toSerialize["Change"] = o.Change
	}
	if o.Reconcile != nil {
		toSerialize["Reconcile"] = o.Reconcile
	}
	if o.SecretUpdateConfiguration != nil {
		toSerialize["SecretUpdateConfiguration"] = o.SecretUpdateConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableCredentialsManagementPolicy struct {
	value *CredentialsManagementPolicy
	isSet bool
}

func (v NullableCredentialsManagementPolicy) Get() *CredentialsManagementPolicy {
	return v.value
}

func (v *NullableCredentialsManagementPolicy) Set(val *CredentialsManagementPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsManagementPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsManagementPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsManagementPolicy(val *CredentialsManagementPolicy) *NullableCredentialsManagementPolicy {
	return &NullableCredentialsManagementPolicy{value: val, isSet: true}
}

func (v NullableCredentialsManagementPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsManagementPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


