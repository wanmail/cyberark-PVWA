/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FilterQS struct for FilterQS
type FilterQS struct {
	Filter *string `json:"Filter,omitempty"`
}

// NewFilterQS instantiates a new FilterQS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterQS() *FilterQS {
	this := FilterQS{}
	return &this
}

// NewFilterQSWithDefaults instantiates a new FilterQS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterQSWithDefaults() *FilterQS {
	this := FilterQS{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *FilterQS) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterQS) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *FilterQS) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *FilterQS) SetFilter(v string) {
	o.Filter = &v
}

func (o FilterQS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["Filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableFilterQS struct {
	value *FilterQS
	isSet bool
}

func (v NullableFilterQS) Get() *FilterQS {
	return v.value
}

func (v *NullableFilterQS) Set(val *FilterQS) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterQS) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterQS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterQS(val *FilterQS) *NullableFilterQS {
	return &NullableFilterQS{value: val, isSet: true}
}

func (v NullableFilterQS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterQS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


