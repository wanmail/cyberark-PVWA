/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetSafeMemberRequest struct for GetSafeMemberRequest
type GetSafeMemberRequest struct {
	// Whether to retrieve from session or not.
	UseCache *bool `json:"useCache,omitempty"`
}

// NewGetSafeMemberRequest instantiates a new GetSafeMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSafeMemberRequest() *GetSafeMemberRequest {
	this := GetSafeMemberRequest{}
	return &this
}

// NewGetSafeMemberRequestWithDefaults instantiates a new GetSafeMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSafeMemberRequestWithDefaults() *GetSafeMemberRequest {
	this := GetSafeMemberRequest{}
	return &this
}

// GetUseCache returns the UseCache field value if set, zero value otherwise.
func (o *GetSafeMemberRequest) GetUseCache() bool {
	if o == nil || o.UseCache == nil {
		var ret bool
		return ret
	}
	return *o.UseCache
}

// GetUseCacheOk returns a tuple with the UseCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSafeMemberRequest) GetUseCacheOk() (*bool, bool) {
	if o == nil || o.UseCache == nil {
		return nil, false
	}
	return o.UseCache, true
}

// HasUseCache returns a boolean if a field has been set.
func (o *GetSafeMemberRequest) HasUseCache() bool {
	if o != nil && o.UseCache != nil {
		return true
	}

	return false
}

// SetUseCache gets a reference to the given bool and assigns it to the UseCache field.
func (o *GetSafeMemberRequest) SetUseCache(v bool) {
	o.UseCache = &v
}

func (o GetSafeMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UseCache != nil {
		toSerialize["useCache"] = o.UseCache
	}
	return json.Marshal(toSerialize)
}

type NullableGetSafeMemberRequest struct {
	value *GetSafeMemberRequest
	isSet bool
}

func (v NullableGetSafeMemberRequest) Get() *GetSafeMemberRequest {
	return v.value
}

func (v *NullableGetSafeMemberRequest) Set(val *GetSafeMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSafeMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSafeMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSafeMemberRequest(val *GetSafeMemberRequest) *NullableGetSafeMemberRequest {
	return &NullableGetSafeMemberRequest{value: val, isSet: true}
}

func (v NullableGetSafeMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSafeMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


