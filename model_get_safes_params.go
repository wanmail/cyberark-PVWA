/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetSafesParams struct for GetSafesParams
type GetSafesParams struct {
	// Whether or not to return accounts for each Safe as part of the response. If not sent, the value will be false.
	IncludeAccounts *bool `json:"includeAccounts,omitempty"`
	// Whether or not to return all Safe data or only SafeName as part of the response. If not sent, the value will be true.
	ExtendedDetails *bool `json:"extendedDetails,omitempty"`
}

// NewGetSafesParams instantiates a new GetSafesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSafesParams() *GetSafesParams {
	this := GetSafesParams{}
	return &this
}

// NewGetSafesParamsWithDefaults instantiates a new GetSafesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSafesParamsWithDefaults() *GetSafesParams {
	this := GetSafesParams{}
	return &this
}

// GetIncludeAccounts returns the IncludeAccounts field value if set, zero value otherwise.
func (o *GetSafesParams) GetIncludeAccounts() bool {
	if o == nil || o.IncludeAccounts == nil {
		var ret bool
		return ret
	}
	return *o.IncludeAccounts
}

// GetIncludeAccountsOk returns a tuple with the IncludeAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSafesParams) GetIncludeAccountsOk() (*bool, bool) {
	if o == nil || o.IncludeAccounts == nil {
		return nil, false
	}
	return o.IncludeAccounts, true
}

// HasIncludeAccounts returns a boolean if a field has been set.
func (o *GetSafesParams) HasIncludeAccounts() bool {
	if o != nil && o.IncludeAccounts != nil {
		return true
	}

	return false
}

// SetIncludeAccounts gets a reference to the given bool and assigns it to the IncludeAccounts field.
func (o *GetSafesParams) SetIncludeAccounts(v bool) {
	o.IncludeAccounts = &v
}

// GetExtendedDetails returns the ExtendedDetails field value if set, zero value otherwise.
func (o *GetSafesParams) GetExtendedDetails() bool {
	if o == nil || o.ExtendedDetails == nil {
		var ret bool
		return ret
	}
	return *o.ExtendedDetails
}

// GetExtendedDetailsOk returns a tuple with the ExtendedDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSafesParams) GetExtendedDetailsOk() (*bool, bool) {
	if o == nil || o.ExtendedDetails == nil {
		return nil, false
	}
	return o.ExtendedDetails, true
}

// HasExtendedDetails returns a boolean if a field has been set.
func (o *GetSafesParams) HasExtendedDetails() bool {
	if o != nil && o.ExtendedDetails != nil {
		return true
	}

	return false
}

// SetExtendedDetails gets a reference to the given bool and assigns it to the ExtendedDetails field.
func (o *GetSafesParams) SetExtendedDetails(v bool) {
	o.ExtendedDetails = &v
}

func (o GetSafesParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludeAccounts != nil {
		toSerialize["includeAccounts"] = o.IncludeAccounts
	}
	if o.ExtendedDetails != nil {
		toSerialize["extendedDetails"] = o.ExtendedDetails
	}
	return json.Marshal(toSerialize)
}

type NullableGetSafesParams struct {
	value *GetSafesParams
	isSet bool
}

func (v NullableGetSafesParams) Get() *GetSafesParams {
	return v.value
}

func (v *NullableGetSafesParams) Set(val *GetSafesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSafesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSafesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSafesParams(val *GetSafesParams) *NullableGetSafesParams {
	return &NullableGetSafesParams{value: val, isSet: true}
}

func (v NullableGetSafesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSafesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


