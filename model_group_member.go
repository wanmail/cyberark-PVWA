/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupMember struct for GroupMember
type GroupMember struct {
	// The name of the member or LDAP group to add to the Vault group.
	MemberId string `json:"memberId"`
	// The type of the member in order to differ between members that come from the domain or from the Vault.    Valid values: domain/vault
	MemberType *string `json:"memberType,omitempty"`
	// The dns address of the domain.
	DomainName string `json:"domainName"`
}

// NewGroupMember instantiates a new GroupMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupMember(memberId string, domainName string) *GroupMember {
	this := GroupMember{}
	this.MemberId = memberId
	this.DomainName = domainName
	return &this
}

// NewGroupMemberWithDefaults instantiates a new GroupMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupMemberWithDefaults() *GroupMember {
	this := GroupMember{}
	return &this
}

// GetMemberId returns the MemberId field value
func (o *GroupMember) GetMemberId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value
// and a boolean to check if the value has been set.
func (o *GroupMember) GetMemberIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberId, true
}

// SetMemberId sets field value
func (o *GroupMember) SetMemberId(v string) {
	o.MemberId = v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *GroupMember) GetMemberType() string {
	if o == nil || o.MemberType == nil {
		var ret string
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetMemberTypeOk() (*string, bool) {
	if o == nil || o.MemberType == nil {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *GroupMember) HasMemberType() bool {
	if o != nil && o.MemberType != nil {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given string and assigns it to the MemberType field.
func (o *GroupMember) SetMemberType(v string) {
	o.MemberType = &v
}

// GetDomainName returns the DomainName field value
func (o *GroupMember) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *GroupMember) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *GroupMember) SetDomainName(v string) {
	o.DomainName = v
}

func (o GroupMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["memberId"] = o.MemberId
	}
	if o.MemberType != nil {
		toSerialize["memberType"] = o.MemberType
	}
	if true {
		toSerialize["domainName"] = o.DomainName
	}
	return json.Marshal(toSerialize)
}

type NullableGroupMember struct {
	value *GroupMember
	isSet bool
}

func (v NullableGroupMember) Get() *GroupMember {
	return v.value
}

func (v *NullableGroupMember) Set(val *GroupMember) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMember) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMember(val *GroupMember) *NullableGroupMember {
	return &NullableGroupMember{value: val, isSet: true}
}

func (v NullableGroupMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


