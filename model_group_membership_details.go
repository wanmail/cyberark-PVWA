/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupMembershipDetails struct for GroupMembershipDetails
type GroupMembershipDetails struct {
	// The unique ID of the group.
	GroupID *int64 `json:"groupID,omitempty"`
	// The name of a group in the Vault.
	GroupName *string `json:"groupName,omitempty"`
	// Whether this is a Vault group or a Directory group.
	GroupType *string `json:"groupType,omitempty"`
}

// NewGroupMembershipDetails instantiates a new GroupMembershipDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupMembershipDetails() *GroupMembershipDetails {
	this := GroupMembershipDetails{}
	return &this
}

// NewGroupMembershipDetailsWithDefaults instantiates a new GroupMembershipDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupMembershipDetailsWithDefaults() *GroupMembershipDetails {
	this := GroupMembershipDetails{}
	return &this
}

// GetGroupID returns the GroupID field value if set, zero value otherwise.
func (o *GroupMembershipDetails) GetGroupID() int64 {
	if o == nil || o.GroupID == nil {
		var ret int64
		return ret
	}
	return *o.GroupID
}

// GetGroupIDOk returns a tuple with the GroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMembershipDetails) GetGroupIDOk() (*int64, bool) {
	if o == nil || o.GroupID == nil {
		return nil, false
	}
	return o.GroupID, true
}

// HasGroupID returns a boolean if a field has been set.
func (o *GroupMembershipDetails) HasGroupID() bool {
	if o != nil && o.GroupID != nil {
		return true
	}

	return false
}

// SetGroupID gets a reference to the given int64 and assigns it to the GroupID field.
func (o *GroupMembershipDetails) SetGroupID(v int64) {
	o.GroupID = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *GroupMembershipDetails) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMembershipDetails) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *GroupMembershipDetails) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *GroupMembershipDetails) SetGroupName(v string) {
	o.GroupName = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *GroupMembershipDetails) GetGroupType() string {
	if o == nil || o.GroupType == nil {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMembershipDetails) GetGroupTypeOk() (*string, bool) {
	if o == nil || o.GroupType == nil {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *GroupMembershipDetails) HasGroupType() bool {
	if o != nil && o.GroupType != nil {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *GroupMembershipDetails) SetGroupType(v string) {
	o.GroupType = &v
}

func (o GroupMembershipDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupID != nil {
		toSerialize["groupID"] = o.GroupID
	}
	if o.GroupName != nil {
		toSerialize["groupName"] = o.GroupName
	}
	if o.GroupType != nil {
		toSerialize["groupType"] = o.GroupType
	}
	return json.Marshal(toSerialize)
}

type NullableGroupMembershipDetails struct {
	value *GroupMembershipDetails
	isSet bool
}

func (v NullableGroupMembershipDetails) Get() *GroupMembershipDetails {
	return v.value
}

func (v *NullableGroupMembershipDetails) Set(val *GroupMembershipDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMembershipDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMembershipDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMembershipDetails(val *GroupMembershipDetails) *NullableGroupMembershipDetails {
	return &NullableGroupMembershipDetails{value: val, isSet: true}
}

func (v NullableGroupMembershipDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMembershipDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


