/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ImportPlatformData struct for ImportPlatformData
type ImportPlatformData struct {
	// The ZIP file containing the platform.
	ImportFile string `json:"ImportFile"`
}

// NewImportPlatformData instantiates a new ImportPlatformData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportPlatformData(importFile string) *ImportPlatformData {
	this := ImportPlatformData{}
	this.ImportFile = importFile
	return &this
}

// NewImportPlatformDataWithDefaults instantiates a new ImportPlatformData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportPlatformDataWithDefaults() *ImportPlatformData {
	this := ImportPlatformData{}
	return &this
}

// GetImportFile returns the ImportFile field value
func (o *ImportPlatformData) GetImportFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImportFile
}

// GetImportFileOk returns a tuple with the ImportFile field value
// and a boolean to check if the value has been set.
func (o *ImportPlatformData) GetImportFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportFile, true
}

// SetImportFile sets field value
func (o *ImportPlatformData) SetImportFile(v string) {
	o.ImportFile = v
}

func (o ImportPlatformData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ImportFile"] = o.ImportFile
	}
	return json.Marshal(toSerialize)
}

type NullableImportPlatformData struct {
	value *ImportPlatformData
	isSet bool
}

func (v NullableImportPlatformData) Get() *ImportPlatformData {
	return v.value
}

func (v *NullableImportPlatformData) Set(val *ImportPlatformData) {
	v.value = val
	v.isSet = true
}

func (v NullableImportPlatformData) IsSet() bool {
	return v.isSet
}

func (v *NullableImportPlatformData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportPlatformData(val *ImportPlatformData) *NullableImportPlatformData {
	return &NullableImportPlatformData{value: val, isSet: true}
}

func (v NullableImportPlatformData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportPlatformData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


