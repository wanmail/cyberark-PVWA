/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LDAPDirectory struct for LDAPDirectory
type LDAPDirectory struct {
	// The name of the directory profile file that represents the profile the Vault should use when working with the specified LDAP directory.
	DirectoryType string `json:"DirectoryType"`
	// The user that will authenticate to the directory server.
	BindUsername *string `json:"BindUsername,omitempty"`
	// The password for the user specified in the Bind User field.
	BindPassword *string `json:"BindPassword,omitempty"`
	// The port that will be used to access the specified server.  The standard port for SSL LDAP connections is 636, and for non-SSL LDAP connections is 389.
	Port *int32 `json:"Port,omitempty"`
	// Read-only - Whether or not to connect to the external directory with SSL.
	SSLConnect *bool `json:"SSLConnect,omitempty"`
	// Read-only - The name of the LDAP directory where users and groups are listed.  Note: After external users and groups from this directory have been created in the Vault, this parameter must not be changed.
	LDAPDirectoryName *string `json:"LDAPDirectoryName,omitempty"`
	// Read-only - The order in which the Vault will search directories for users before creating a corresponding User Account or Group in the Vault.
	LDAPDirectoryQueryOrder *int32 `json:"LDAPDirectoryQueryOrder,omitempty"`
	// Read-only - A short description of the LDAP directory.
	LDAPDirectoryDescription *string `json:"LDAPDirectoryDescription,omitempty"`
	// Read-only - The text that will be used as a prefix for external users and groups in the Vault created from the specified directory.  This parameter is oprional,  The parameter will be ignored if AddDomainToUserName parameter is set to Yes.
	VaultObjectNamesPrefix *string `json:"VaultObjectNamesPrefix,omitempty"`
	// Read-only - The location of the bind password in the VaultInternal Safe.
	PasswordObjectPath *string `json:"PasswordObjectPath,omitempty"`
	// Read-only - The base context that will be used for external directory queries, for groups only. This parameter is optional.
	LDAPDirectoryGroupBaseContext *string `json:"LDAPDirectoryGroupBaseContext,omitempty"`
	// Read-only - The number of recursive LDAP referrals that will be chased. The default value is -1 (unlimited).
	ReferralsChasingHopLimit *int32 `json:"ReferralsChasingHopLimit,omitempty"`
	// Read-only - Whether or not to add active directory domain names to names of groups that are provisioned in the Vault.
	AppendFriendlyDomainNameToGroup *bool `json:"AppendFriendlyDomainNameToGroup,omitempty"`
	// Read-only - Whether or not LDAP referrals will only be supported when an external directory parameter file has been defined in the Vault for the referred directory.  The default value is false
	RequireReferredDirectoryDefinition *bool `json:"RequireReferredDirectoryDefinition,omitempty"`
	// Read-only - Enables referrals to be specified as domain names. The default value is false.    If this parameter is not enabled, in SSL or High-Availabilty implementations,   a directory file must be created for each domain that will be supported by the Vault,   and the domain name specified in each parameter file must be mapped in the DomainDNSName parameter in the referred directory.   In addition, each referral directory must be defined in the Windows\\System32\\Etc\\Hosts file.
	ReferralsDNSLookup *bool `json:"ReferralsDNSLookup,omitempty"`
	// Read-only - If set to true, prevents enumerating users from directory for Safe ownership lockups.
	DisableUserEnumeration *bool `json:"DisableUserEnumeration,omitempty"`
	// Read-only - Causes an additional query filter to be done in scope of specific user.
	AdditionalQueryFilterOptimize *bool `json:"AdditionalQueryFilterOptimize,omitempty"`
	// Read-only - Whether or not to use this directory for PKI certificate browsing.
	ClientBrowsing *bool `json:"ClientBrowsing,omitempty"`
	// Read-only - Whether or not to use this directory for user provisioning.
	ExternalObjectCreation *bool `json:"ExternalObjectCreation,omitempty"`
	// Read-only - Whether or not to use this directory for authentication.
	Authentication *bool `json:"Authentication,omitempty"`
	// Read-only - Determines whether the user certificate DN can be set manually, or taken from the Directory.
	UseLDAPCertificatesOnly *bool `json:"UseLDAPCertificatesOnly,omitempty"`
	// Read-only - Determines whether or not to use page mode search while searching in the LDAP directory. This parameter is optional.
	DisablePaging *bool `json:"DisablePaging,omitempty"`
	// Read-only - Whether or not LDAP disabled users will be created in the Vault.
	ProvisionDisabledUsers *bool `json:"ProvisionDisabledUsers,omitempty"`
	// Read-only - Whether you can create external objects from this external directory, browse it, authenticate users, or do all three.  Possible values: ClientBrowsing, ExternalObjectsCreation, Authentication.  The user is able to set one value or multiple values separated by comma.
	LDAPDirectoryUsage []int32 `json:"LDAPDirectoryUsage,omitempty"`
	// A list of host servers for External Directory.
	DCList []LDAPDomainController `json:"DCList"`
	// The address of the domain.
	DomainName string `json:"DomainName"`
	// The base context of the External Directory.
	DomainBaseContext string `json:"DomainBaseContext"`
}

// NewLDAPDirectory instantiates a new LDAPDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLDAPDirectory(directoryType string, dCList []LDAPDomainController, domainName string, domainBaseContext string) *LDAPDirectory {
	this := LDAPDirectory{}
	this.DirectoryType = directoryType
	this.DCList = dCList
	this.DomainName = domainName
	this.DomainBaseContext = domainBaseContext
	return &this
}

// NewLDAPDirectoryWithDefaults instantiates a new LDAPDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLDAPDirectoryWithDefaults() *LDAPDirectory {
	this := LDAPDirectory{}
	return &this
}

// GetDirectoryType returns the DirectoryType field value
func (o *LDAPDirectory) GetDirectoryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirectoryType
}

// GetDirectoryTypeOk returns a tuple with the DirectoryType field value
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDirectoryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectoryType, true
}

// SetDirectoryType sets field value
func (o *LDAPDirectory) SetDirectoryType(v string) {
	o.DirectoryType = v
}

// GetBindUsername returns the BindUsername field value if set, zero value otherwise.
func (o *LDAPDirectory) GetBindUsername() string {
	if o == nil || o.BindUsername == nil {
		var ret string
		return ret
	}
	return *o.BindUsername
}

// GetBindUsernameOk returns a tuple with the BindUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetBindUsernameOk() (*string, bool) {
	if o == nil || o.BindUsername == nil {
		return nil, false
	}
	return o.BindUsername, true
}

// HasBindUsername returns a boolean if a field has been set.
func (o *LDAPDirectory) HasBindUsername() bool {
	if o != nil && o.BindUsername != nil {
		return true
	}

	return false
}

// SetBindUsername gets a reference to the given string and assigns it to the BindUsername field.
func (o *LDAPDirectory) SetBindUsername(v string) {
	o.BindUsername = &v
}

// GetBindPassword returns the BindPassword field value if set, zero value otherwise.
func (o *LDAPDirectory) GetBindPassword() string {
	if o == nil || o.BindPassword == nil {
		var ret string
		return ret
	}
	return *o.BindPassword
}

// GetBindPasswordOk returns a tuple with the BindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetBindPasswordOk() (*string, bool) {
	if o == nil || o.BindPassword == nil {
		return nil, false
	}
	return o.BindPassword, true
}

// HasBindPassword returns a boolean if a field has been set.
func (o *LDAPDirectory) HasBindPassword() bool {
	if o != nil && o.BindPassword != nil {
		return true
	}

	return false
}

// SetBindPassword gets a reference to the given string and assigns it to the BindPassword field.
func (o *LDAPDirectory) SetBindPassword(v string) {
	o.BindPassword = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LDAPDirectory) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LDAPDirectory) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LDAPDirectory) SetPort(v int32) {
	o.Port = &v
}

// GetSSLConnect returns the SSLConnect field value if set, zero value otherwise.
func (o *LDAPDirectory) GetSSLConnect() bool {
	if o == nil || o.SSLConnect == nil {
		var ret bool
		return ret
	}
	return *o.SSLConnect
}

// GetSSLConnectOk returns a tuple with the SSLConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetSSLConnectOk() (*bool, bool) {
	if o == nil || o.SSLConnect == nil {
		return nil, false
	}
	return o.SSLConnect, true
}

// HasSSLConnect returns a boolean if a field has been set.
func (o *LDAPDirectory) HasSSLConnect() bool {
	if o != nil && o.SSLConnect != nil {
		return true
	}

	return false
}

// SetSSLConnect gets a reference to the given bool and assigns it to the SSLConnect field.
func (o *LDAPDirectory) SetSSLConnect(v bool) {
	o.SSLConnect = &v
}

// GetLDAPDirectoryName returns the LDAPDirectoryName field value if set, zero value otherwise.
func (o *LDAPDirectory) GetLDAPDirectoryName() string {
	if o == nil || o.LDAPDirectoryName == nil {
		var ret string
		return ret
	}
	return *o.LDAPDirectoryName
}

// GetLDAPDirectoryNameOk returns a tuple with the LDAPDirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetLDAPDirectoryNameOk() (*string, bool) {
	if o == nil || o.LDAPDirectoryName == nil {
		return nil, false
	}
	return o.LDAPDirectoryName, true
}

// HasLDAPDirectoryName returns a boolean if a field has been set.
func (o *LDAPDirectory) HasLDAPDirectoryName() bool {
	if o != nil && o.LDAPDirectoryName != nil {
		return true
	}

	return false
}

// SetLDAPDirectoryName gets a reference to the given string and assigns it to the LDAPDirectoryName field.
func (o *LDAPDirectory) SetLDAPDirectoryName(v string) {
	o.LDAPDirectoryName = &v
}

// GetLDAPDirectoryQueryOrder returns the LDAPDirectoryQueryOrder field value if set, zero value otherwise.
func (o *LDAPDirectory) GetLDAPDirectoryQueryOrder() int32 {
	if o == nil || o.LDAPDirectoryQueryOrder == nil {
		var ret int32
		return ret
	}
	return *o.LDAPDirectoryQueryOrder
}

// GetLDAPDirectoryQueryOrderOk returns a tuple with the LDAPDirectoryQueryOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetLDAPDirectoryQueryOrderOk() (*int32, bool) {
	if o == nil || o.LDAPDirectoryQueryOrder == nil {
		return nil, false
	}
	return o.LDAPDirectoryQueryOrder, true
}

// HasLDAPDirectoryQueryOrder returns a boolean if a field has been set.
func (o *LDAPDirectory) HasLDAPDirectoryQueryOrder() bool {
	if o != nil && o.LDAPDirectoryQueryOrder != nil {
		return true
	}

	return false
}

// SetLDAPDirectoryQueryOrder gets a reference to the given int32 and assigns it to the LDAPDirectoryQueryOrder field.
func (o *LDAPDirectory) SetLDAPDirectoryQueryOrder(v int32) {
	o.LDAPDirectoryQueryOrder = &v
}

// GetLDAPDirectoryDescription returns the LDAPDirectoryDescription field value if set, zero value otherwise.
func (o *LDAPDirectory) GetLDAPDirectoryDescription() string {
	if o == nil || o.LDAPDirectoryDescription == nil {
		var ret string
		return ret
	}
	return *o.LDAPDirectoryDescription
}

// GetLDAPDirectoryDescriptionOk returns a tuple with the LDAPDirectoryDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetLDAPDirectoryDescriptionOk() (*string, bool) {
	if o == nil || o.LDAPDirectoryDescription == nil {
		return nil, false
	}
	return o.LDAPDirectoryDescription, true
}

// HasLDAPDirectoryDescription returns a boolean if a field has been set.
func (o *LDAPDirectory) HasLDAPDirectoryDescription() bool {
	if o != nil && o.LDAPDirectoryDescription != nil {
		return true
	}

	return false
}

// SetLDAPDirectoryDescription gets a reference to the given string and assigns it to the LDAPDirectoryDescription field.
func (o *LDAPDirectory) SetLDAPDirectoryDescription(v string) {
	o.LDAPDirectoryDescription = &v
}

// GetVaultObjectNamesPrefix returns the VaultObjectNamesPrefix field value if set, zero value otherwise.
func (o *LDAPDirectory) GetVaultObjectNamesPrefix() string {
	if o == nil || o.VaultObjectNamesPrefix == nil {
		var ret string
		return ret
	}
	return *o.VaultObjectNamesPrefix
}

// GetVaultObjectNamesPrefixOk returns a tuple with the VaultObjectNamesPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetVaultObjectNamesPrefixOk() (*string, bool) {
	if o == nil || o.VaultObjectNamesPrefix == nil {
		return nil, false
	}
	return o.VaultObjectNamesPrefix, true
}

// HasVaultObjectNamesPrefix returns a boolean if a field has been set.
func (o *LDAPDirectory) HasVaultObjectNamesPrefix() bool {
	if o != nil && o.VaultObjectNamesPrefix != nil {
		return true
	}

	return false
}

// SetVaultObjectNamesPrefix gets a reference to the given string and assigns it to the VaultObjectNamesPrefix field.
func (o *LDAPDirectory) SetVaultObjectNamesPrefix(v string) {
	o.VaultObjectNamesPrefix = &v
}

// GetPasswordObjectPath returns the PasswordObjectPath field value if set, zero value otherwise.
func (o *LDAPDirectory) GetPasswordObjectPath() string {
	if o == nil || o.PasswordObjectPath == nil {
		var ret string
		return ret
	}
	return *o.PasswordObjectPath
}

// GetPasswordObjectPathOk returns a tuple with the PasswordObjectPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetPasswordObjectPathOk() (*string, bool) {
	if o == nil || o.PasswordObjectPath == nil {
		return nil, false
	}
	return o.PasswordObjectPath, true
}

// HasPasswordObjectPath returns a boolean if a field has been set.
func (o *LDAPDirectory) HasPasswordObjectPath() bool {
	if o != nil && o.PasswordObjectPath != nil {
		return true
	}

	return false
}

// SetPasswordObjectPath gets a reference to the given string and assigns it to the PasswordObjectPath field.
func (o *LDAPDirectory) SetPasswordObjectPath(v string) {
	o.PasswordObjectPath = &v
}

// GetLDAPDirectoryGroupBaseContext returns the LDAPDirectoryGroupBaseContext field value if set, zero value otherwise.
func (o *LDAPDirectory) GetLDAPDirectoryGroupBaseContext() string {
	if o == nil || o.LDAPDirectoryGroupBaseContext == nil {
		var ret string
		return ret
	}
	return *o.LDAPDirectoryGroupBaseContext
}

// GetLDAPDirectoryGroupBaseContextOk returns a tuple with the LDAPDirectoryGroupBaseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetLDAPDirectoryGroupBaseContextOk() (*string, bool) {
	if o == nil || o.LDAPDirectoryGroupBaseContext == nil {
		return nil, false
	}
	return o.LDAPDirectoryGroupBaseContext, true
}

// HasLDAPDirectoryGroupBaseContext returns a boolean if a field has been set.
func (o *LDAPDirectory) HasLDAPDirectoryGroupBaseContext() bool {
	if o != nil && o.LDAPDirectoryGroupBaseContext != nil {
		return true
	}

	return false
}

// SetLDAPDirectoryGroupBaseContext gets a reference to the given string and assigns it to the LDAPDirectoryGroupBaseContext field.
func (o *LDAPDirectory) SetLDAPDirectoryGroupBaseContext(v string) {
	o.LDAPDirectoryGroupBaseContext = &v
}

// GetReferralsChasingHopLimit returns the ReferralsChasingHopLimit field value if set, zero value otherwise.
func (o *LDAPDirectory) GetReferralsChasingHopLimit() int32 {
	if o == nil || o.ReferralsChasingHopLimit == nil {
		var ret int32
		return ret
	}
	return *o.ReferralsChasingHopLimit
}

// GetReferralsChasingHopLimitOk returns a tuple with the ReferralsChasingHopLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetReferralsChasingHopLimitOk() (*int32, bool) {
	if o == nil || o.ReferralsChasingHopLimit == nil {
		return nil, false
	}
	return o.ReferralsChasingHopLimit, true
}

// HasReferralsChasingHopLimit returns a boolean if a field has been set.
func (o *LDAPDirectory) HasReferralsChasingHopLimit() bool {
	if o != nil && o.ReferralsChasingHopLimit != nil {
		return true
	}

	return false
}

// SetReferralsChasingHopLimit gets a reference to the given int32 and assigns it to the ReferralsChasingHopLimit field.
func (o *LDAPDirectory) SetReferralsChasingHopLimit(v int32) {
	o.ReferralsChasingHopLimit = &v
}

// GetAppendFriendlyDomainNameToGroup returns the AppendFriendlyDomainNameToGroup field value if set, zero value otherwise.
func (o *LDAPDirectory) GetAppendFriendlyDomainNameToGroup() bool {
	if o == nil || o.AppendFriendlyDomainNameToGroup == nil {
		var ret bool
		return ret
	}
	return *o.AppendFriendlyDomainNameToGroup
}

// GetAppendFriendlyDomainNameToGroupOk returns a tuple with the AppendFriendlyDomainNameToGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetAppendFriendlyDomainNameToGroupOk() (*bool, bool) {
	if o == nil || o.AppendFriendlyDomainNameToGroup == nil {
		return nil, false
	}
	return o.AppendFriendlyDomainNameToGroup, true
}

// HasAppendFriendlyDomainNameToGroup returns a boolean if a field has been set.
func (o *LDAPDirectory) HasAppendFriendlyDomainNameToGroup() bool {
	if o != nil && o.AppendFriendlyDomainNameToGroup != nil {
		return true
	}

	return false
}

// SetAppendFriendlyDomainNameToGroup gets a reference to the given bool and assigns it to the AppendFriendlyDomainNameToGroup field.
func (o *LDAPDirectory) SetAppendFriendlyDomainNameToGroup(v bool) {
	o.AppendFriendlyDomainNameToGroup = &v
}

// GetRequireReferredDirectoryDefinition returns the RequireReferredDirectoryDefinition field value if set, zero value otherwise.
func (o *LDAPDirectory) GetRequireReferredDirectoryDefinition() bool {
	if o == nil || o.RequireReferredDirectoryDefinition == nil {
		var ret bool
		return ret
	}
	return *o.RequireReferredDirectoryDefinition
}

// GetRequireReferredDirectoryDefinitionOk returns a tuple with the RequireReferredDirectoryDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetRequireReferredDirectoryDefinitionOk() (*bool, bool) {
	if o == nil || o.RequireReferredDirectoryDefinition == nil {
		return nil, false
	}
	return o.RequireReferredDirectoryDefinition, true
}

// HasRequireReferredDirectoryDefinition returns a boolean if a field has been set.
func (o *LDAPDirectory) HasRequireReferredDirectoryDefinition() bool {
	if o != nil && o.RequireReferredDirectoryDefinition != nil {
		return true
	}

	return false
}

// SetRequireReferredDirectoryDefinition gets a reference to the given bool and assigns it to the RequireReferredDirectoryDefinition field.
func (o *LDAPDirectory) SetRequireReferredDirectoryDefinition(v bool) {
	o.RequireReferredDirectoryDefinition = &v
}

// GetReferralsDNSLookup returns the ReferralsDNSLookup field value if set, zero value otherwise.
func (o *LDAPDirectory) GetReferralsDNSLookup() bool {
	if o == nil || o.ReferralsDNSLookup == nil {
		var ret bool
		return ret
	}
	return *o.ReferralsDNSLookup
}

// GetReferralsDNSLookupOk returns a tuple with the ReferralsDNSLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetReferralsDNSLookupOk() (*bool, bool) {
	if o == nil || o.ReferralsDNSLookup == nil {
		return nil, false
	}
	return o.ReferralsDNSLookup, true
}

// HasReferralsDNSLookup returns a boolean if a field has been set.
func (o *LDAPDirectory) HasReferralsDNSLookup() bool {
	if o != nil && o.ReferralsDNSLookup != nil {
		return true
	}

	return false
}

// SetReferralsDNSLookup gets a reference to the given bool and assigns it to the ReferralsDNSLookup field.
func (o *LDAPDirectory) SetReferralsDNSLookup(v bool) {
	o.ReferralsDNSLookup = &v
}

// GetDisableUserEnumeration returns the DisableUserEnumeration field value if set, zero value otherwise.
func (o *LDAPDirectory) GetDisableUserEnumeration() bool {
	if o == nil || o.DisableUserEnumeration == nil {
		var ret bool
		return ret
	}
	return *o.DisableUserEnumeration
}

// GetDisableUserEnumerationOk returns a tuple with the DisableUserEnumeration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDisableUserEnumerationOk() (*bool, bool) {
	if o == nil || o.DisableUserEnumeration == nil {
		return nil, false
	}
	return o.DisableUserEnumeration, true
}

// HasDisableUserEnumeration returns a boolean if a field has been set.
func (o *LDAPDirectory) HasDisableUserEnumeration() bool {
	if o != nil && o.DisableUserEnumeration != nil {
		return true
	}

	return false
}

// SetDisableUserEnumeration gets a reference to the given bool and assigns it to the DisableUserEnumeration field.
func (o *LDAPDirectory) SetDisableUserEnumeration(v bool) {
	o.DisableUserEnumeration = &v
}

// GetAdditionalQueryFilterOptimize returns the AdditionalQueryFilterOptimize field value if set, zero value otherwise.
func (o *LDAPDirectory) GetAdditionalQueryFilterOptimize() bool {
	if o == nil || o.AdditionalQueryFilterOptimize == nil {
		var ret bool
		return ret
	}
	return *o.AdditionalQueryFilterOptimize
}

// GetAdditionalQueryFilterOptimizeOk returns a tuple with the AdditionalQueryFilterOptimize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetAdditionalQueryFilterOptimizeOk() (*bool, bool) {
	if o == nil || o.AdditionalQueryFilterOptimize == nil {
		return nil, false
	}
	return o.AdditionalQueryFilterOptimize, true
}

// HasAdditionalQueryFilterOptimize returns a boolean if a field has been set.
func (o *LDAPDirectory) HasAdditionalQueryFilterOptimize() bool {
	if o != nil && o.AdditionalQueryFilterOptimize != nil {
		return true
	}

	return false
}

// SetAdditionalQueryFilterOptimize gets a reference to the given bool and assigns it to the AdditionalQueryFilterOptimize field.
func (o *LDAPDirectory) SetAdditionalQueryFilterOptimize(v bool) {
	o.AdditionalQueryFilterOptimize = &v
}

// GetClientBrowsing returns the ClientBrowsing field value if set, zero value otherwise.
func (o *LDAPDirectory) GetClientBrowsing() bool {
	if o == nil || o.ClientBrowsing == nil {
		var ret bool
		return ret
	}
	return *o.ClientBrowsing
}

// GetClientBrowsingOk returns a tuple with the ClientBrowsing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetClientBrowsingOk() (*bool, bool) {
	if o == nil || o.ClientBrowsing == nil {
		return nil, false
	}
	return o.ClientBrowsing, true
}

// HasClientBrowsing returns a boolean if a field has been set.
func (o *LDAPDirectory) HasClientBrowsing() bool {
	if o != nil && o.ClientBrowsing != nil {
		return true
	}

	return false
}

// SetClientBrowsing gets a reference to the given bool and assigns it to the ClientBrowsing field.
func (o *LDAPDirectory) SetClientBrowsing(v bool) {
	o.ClientBrowsing = &v
}

// GetExternalObjectCreation returns the ExternalObjectCreation field value if set, zero value otherwise.
func (o *LDAPDirectory) GetExternalObjectCreation() bool {
	if o == nil || o.ExternalObjectCreation == nil {
		var ret bool
		return ret
	}
	return *o.ExternalObjectCreation
}

// GetExternalObjectCreationOk returns a tuple with the ExternalObjectCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetExternalObjectCreationOk() (*bool, bool) {
	if o == nil || o.ExternalObjectCreation == nil {
		return nil, false
	}
	return o.ExternalObjectCreation, true
}

// HasExternalObjectCreation returns a boolean if a field has been set.
func (o *LDAPDirectory) HasExternalObjectCreation() bool {
	if o != nil && o.ExternalObjectCreation != nil {
		return true
	}

	return false
}

// SetExternalObjectCreation gets a reference to the given bool and assigns it to the ExternalObjectCreation field.
func (o *LDAPDirectory) SetExternalObjectCreation(v bool) {
	o.ExternalObjectCreation = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *LDAPDirectory) GetAuthentication() bool {
	if o == nil || o.Authentication == nil {
		var ret bool
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetAuthenticationOk() (*bool, bool) {
	if o == nil || o.Authentication == nil {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *LDAPDirectory) HasAuthentication() bool {
	if o != nil && o.Authentication != nil {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given bool and assigns it to the Authentication field.
func (o *LDAPDirectory) SetAuthentication(v bool) {
	o.Authentication = &v
}

// GetUseLDAPCertificatesOnly returns the UseLDAPCertificatesOnly field value if set, zero value otherwise.
func (o *LDAPDirectory) GetUseLDAPCertificatesOnly() bool {
	if o == nil || o.UseLDAPCertificatesOnly == nil {
		var ret bool
		return ret
	}
	return *o.UseLDAPCertificatesOnly
}

// GetUseLDAPCertificatesOnlyOk returns a tuple with the UseLDAPCertificatesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetUseLDAPCertificatesOnlyOk() (*bool, bool) {
	if o == nil || o.UseLDAPCertificatesOnly == nil {
		return nil, false
	}
	return o.UseLDAPCertificatesOnly, true
}

// HasUseLDAPCertificatesOnly returns a boolean if a field has been set.
func (o *LDAPDirectory) HasUseLDAPCertificatesOnly() bool {
	if o != nil && o.UseLDAPCertificatesOnly != nil {
		return true
	}

	return false
}

// SetUseLDAPCertificatesOnly gets a reference to the given bool and assigns it to the UseLDAPCertificatesOnly field.
func (o *LDAPDirectory) SetUseLDAPCertificatesOnly(v bool) {
	o.UseLDAPCertificatesOnly = &v
}

// GetDisablePaging returns the DisablePaging field value if set, zero value otherwise.
func (o *LDAPDirectory) GetDisablePaging() bool {
	if o == nil || o.DisablePaging == nil {
		var ret bool
		return ret
	}
	return *o.DisablePaging
}

// GetDisablePagingOk returns a tuple with the DisablePaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDisablePagingOk() (*bool, bool) {
	if o == nil || o.DisablePaging == nil {
		return nil, false
	}
	return o.DisablePaging, true
}

// HasDisablePaging returns a boolean if a field has been set.
func (o *LDAPDirectory) HasDisablePaging() bool {
	if o != nil && o.DisablePaging != nil {
		return true
	}

	return false
}

// SetDisablePaging gets a reference to the given bool and assigns it to the DisablePaging field.
func (o *LDAPDirectory) SetDisablePaging(v bool) {
	o.DisablePaging = &v
}

// GetProvisionDisabledUsers returns the ProvisionDisabledUsers field value if set, zero value otherwise.
func (o *LDAPDirectory) GetProvisionDisabledUsers() bool {
	if o == nil || o.ProvisionDisabledUsers == nil {
		var ret bool
		return ret
	}
	return *o.ProvisionDisabledUsers
}

// GetProvisionDisabledUsersOk returns a tuple with the ProvisionDisabledUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetProvisionDisabledUsersOk() (*bool, bool) {
	if o == nil || o.ProvisionDisabledUsers == nil {
		return nil, false
	}
	return o.ProvisionDisabledUsers, true
}

// HasProvisionDisabledUsers returns a boolean if a field has been set.
func (o *LDAPDirectory) HasProvisionDisabledUsers() bool {
	if o != nil && o.ProvisionDisabledUsers != nil {
		return true
	}

	return false
}

// SetProvisionDisabledUsers gets a reference to the given bool and assigns it to the ProvisionDisabledUsers field.
func (o *LDAPDirectory) SetProvisionDisabledUsers(v bool) {
	o.ProvisionDisabledUsers = &v
}

// GetLDAPDirectoryUsage returns the LDAPDirectoryUsage field value if set, zero value otherwise.
func (o *LDAPDirectory) GetLDAPDirectoryUsage() []int32 {
	if o == nil || o.LDAPDirectoryUsage == nil {
		var ret []int32
		return ret
	}
	return o.LDAPDirectoryUsage
}

// GetLDAPDirectoryUsageOk returns a tuple with the LDAPDirectoryUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetLDAPDirectoryUsageOk() ([]int32, bool) {
	if o == nil || o.LDAPDirectoryUsage == nil {
		return nil, false
	}
	return o.LDAPDirectoryUsage, true
}

// HasLDAPDirectoryUsage returns a boolean if a field has been set.
func (o *LDAPDirectory) HasLDAPDirectoryUsage() bool {
	if o != nil && o.LDAPDirectoryUsage != nil {
		return true
	}

	return false
}

// SetLDAPDirectoryUsage gets a reference to the given []int32 and assigns it to the LDAPDirectoryUsage field.
func (o *LDAPDirectory) SetLDAPDirectoryUsage(v []int32) {
	o.LDAPDirectoryUsage = v
}

// GetDCList returns the DCList field value
func (o *LDAPDirectory) GetDCList() []LDAPDomainController {
	if o == nil {
		var ret []LDAPDomainController
		return ret
	}

	return o.DCList
}

// GetDCListOk returns a tuple with the DCList field value
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDCListOk() ([]LDAPDomainController, bool) {
	if o == nil {
		return nil, false
	}
	return o.DCList, true
}

// SetDCList sets field value
func (o *LDAPDirectory) SetDCList(v []LDAPDomainController) {
	o.DCList = v
}

// GetDomainName returns the DomainName field value
func (o *LDAPDirectory) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *LDAPDirectory) SetDomainName(v string) {
	o.DomainName = v
}

// GetDomainBaseContext returns the DomainBaseContext field value
func (o *LDAPDirectory) GetDomainBaseContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainBaseContext
}

// GetDomainBaseContextOk returns a tuple with the DomainBaseContext field value
// and a boolean to check if the value has been set.
func (o *LDAPDirectory) GetDomainBaseContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainBaseContext, true
}

// SetDomainBaseContext sets field value
func (o *LDAPDirectory) SetDomainBaseContext(v string) {
	o.DomainBaseContext = v
}

func (o LDAPDirectory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["DirectoryType"] = o.DirectoryType
	}
	if o.BindUsername != nil {
		toSerialize["BindUsername"] = o.BindUsername
	}
	if o.BindPassword != nil {
		toSerialize["BindPassword"] = o.BindPassword
	}
	if o.Port != nil {
		toSerialize["Port"] = o.Port
	}
	if o.SSLConnect != nil {
		toSerialize["SSLConnect"] = o.SSLConnect
	}
	if o.LDAPDirectoryName != nil {
		toSerialize["LDAPDirectoryName"] = o.LDAPDirectoryName
	}
	if o.LDAPDirectoryQueryOrder != nil {
		toSerialize["LDAPDirectoryQueryOrder"] = o.LDAPDirectoryQueryOrder
	}
	if o.LDAPDirectoryDescription != nil {
		toSerialize["LDAPDirectoryDescription"] = o.LDAPDirectoryDescription
	}
	if o.VaultObjectNamesPrefix != nil {
		toSerialize["VaultObjectNamesPrefix"] = o.VaultObjectNamesPrefix
	}
	if o.PasswordObjectPath != nil {
		toSerialize["PasswordObjectPath"] = o.PasswordObjectPath
	}
	if o.LDAPDirectoryGroupBaseContext != nil {
		toSerialize["LDAPDirectoryGroupBaseContext"] = o.LDAPDirectoryGroupBaseContext
	}
	if o.ReferralsChasingHopLimit != nil {
		toSerialize["ReferralsChasingHopLimit"] = o.ReferralsChasingHopLimit
	}
	if o.AppendFriendlyDomainNameToGroup != nil {
		toSerialize["AppendFriendlyDomainNameToGroup"] = o.AppendFriendlyDomainNameToGroup
	}
	if o.RequireReferredDirectoryDefinition != nil {
		toSerialize["RequireReferredDirectoryDefinition"] = o.RequireReferredDirectoryDefinition
	}
	if o.ReferralsDNSLookup != nil {
		toSerialize["ReferralsDNSLookup"] = o.ReferralsDNSLookup
	}
	if o.DisableUserEnumeration != nil {
		toSerialize["DisableUserEnumeration"] = o.DisableUserEnumeration
	}
	if o.AdditionalQueryFilterOptimize != nil {
		toSerialize["AdditionalQueryFilterOptimize"] = o.AdditionalQueryFilterOptimize
	}
	if o.ClientBrowsing != nil {
		toSerialize["ClientBrowsing"] = o.ClientBrowsing
	}
	if o.ExternalObjectCreation != nil {
		toSerialize["ExternalObjectCreation"] = o.ExternalObjectCreation
	}
	if o.Authentication != nil {
		toSerialize["Authentication"] = o.Authentication
	}
	if o.UseLDAPCertificatesOnly != nil {
		toSerialize["UseLDAPCertificatesOnly"] = o.UseLDAPCertificatesOnly
	}
	if o.DisablePaging != nil {
		toSerialize["DisablePaging"] = o.DisablePaging
	}
	if o.ProvisionDisabledUsers != nil {
		toSerialize["ProvisionDisabledUsers"] = o.ProvisionDisabledUsers
	}
	if o.LDAPDirectoryUsage != nil {
		toSerialize["LDAPDirectoryUsage"] = o.LDAPDirectoryUsage
	}
	if true {
		toSerialize["DCList"] = o.DCList
	}
	if true {
		toSerialize["DomainName"] = o.DomainName
	}
	if true {
		toSerialize["DomainBaseContext"] = o.DomainBaseContext
	}
	return json.Marshal(toSerialize)
}

type NullableLDAPDirectory struct {
	value *LDAPDirectory
	isSet bool
}

func (v NullableLDAPDirectory) Get() *LDAPDirectory {
	return v.value
}

func (v *NullableLDAPDirectory) Set(val *LDAPDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableLDAPDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableLDAPDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLDAPDirectory(val *LDAPDirectory) *NullableLDAPDirectory {
	return &NullableLDAPDirectory{value: val, isSet: true}
}

func (v NullableLDAPDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLDAPDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


