/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MonitoringQS struct for MonitoringQS
type MonitoringQS struct {
	Search *string `json:"Search,omitempty"`
	Activities *string `json:"Activities,omitempty"`
	FromTime *int64 `json:"FromTime,omitempty"`
	ToTime *int64 `json:"ToTime,omitempty"`
	Safe *string `json:"Safe,omitempty"`
}

// NewMonitoringQS instantiates a new MonitoringQS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringQS() *MonitoringQS {
	this := MonitoringQS{}
	return &this
}

// NewMonitoringQSWithDefaults instantiates a new MonitoringQS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringQSWithDefaults() *MonitoringQS {
	this := MonitoringQS{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *MonitoringQS) GetSearch() string {
	if o == nil || o.Search == nil {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringQS) GetSearchOk() (*string, bool) {
	if o == nil || o.Search == nil {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *MonitoringQS) HasSearch() bool {
	if o != nil && o.Search != nil {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *MonitoringQS) SetSearch(v string) {
	o.Search = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *MonitoringQS) GetActivities() string {
	if o == nil || o.Activities == nil {
		var ret string
		return ret
	}
	return *o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringQS) GetActivitiesOk() (*string, bool) {
	if o == nil || o.Activities == nil {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *MonitoringQS) HasActivities() bool {
	if o != nil && o.Activities != nil {
		return true
	}

	return false
}

// SetActivities gets a reference to the given string and assigns it to the Activities field.
func (o *MonitoringQS) SetActivities(v string) {
	o.Activities = &v
}

// GetFromTime returns the FromTime field value if set, zero value otherwise.
func (o *MonitoringQS) GetFromTime() int64 {
	if o == nil || o.FromTime == nil {
		var ret int64
		return ret
	}
	return *o.FromTime
}

// GetFromTimeOk returns a tuple with the FromTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringQS) GetFromTimeOk() (*int64, bool) {
	if o == nil || o.FromTime == nil {
		return nil, false
	}
	return o.FromTime, true
}

// HasFromTime returns a boolean if a field has been set.
func (o *MonitoringQS) HasFromTime() bool {
	if o != nil && o.FromTime != nil {
		return true
	}

	return false
}

// SetFromTime gets a reference to the given int64 and assigns it to the FromTime field.
func (o *MonitoringQS) SetFromTime(v int64) {
	o.FromTime = &v
}

// GetToTime returns the ToTime field value if set, zero value otherwise.
func (o *MonitoringQS) GetToTime() int64 {
	if o == nil || o.ToTime == nil {
		var ret int64
		return ret
	}
	return *o.ToTime
}

// GetToTimeOk returns a tuple with the ToTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringQS) GetToTimeOk() (*int64, bool) {
	if o == nil || o.ToTime == nil {
		return nil, false
	}
	return o.ToTime, true
}

// HasToTime returns a boolean if a field has been set.
func (o *MonitoringQS) HasToTime() bool {
	if o != nil && o.ToTime != nil {
		return true
	}

	return false
}

// SetToTime gets a reference to the given int64 and assigns it to the ToTime field.
func (o *MonitoringQS) SetToTime(v int64) {
	o.ToTime = &v
}

// GetSafe returns the Safe field value if set, zero value otherwise.
func (o *MonitoringQS) GetSafe() string {
	if o == nil || o.Safe == nil {
		var ret string
		return ret
	}
	return *o.Safe
}

// GetSafeOk returns a tuple with the Safe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringQS) GetSafeOk() (*string, bool) {
	if o == nil || o.Safe == nil {
		return nil, false
	}
	return o.Safe, true
}

// HasSafe returns a boolean if a field has been set.
func (o *MonitoringQS) HasSafe() bool {
	if o != nil && o.Safe != nil {
		return true
	}

	return false
}

// SetSafe gets a reference to the given string and assigns it to the Safe field.
func (o *MonitoringQS) SetSafe(v string) {
	o.Safe = &v
}

func (o MonitoringQS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Search != nil {
		toSerialize["Search"] = o.Search
	}
	if o.Activities != nil {
		toSerialize["Activities"] = o.Activities
	}
	if o.FromTime != nil {
		toSerialize["FromTime"] = o.FromTime
	}
	if o.ToTime != nil {
		toSerialize["ToTime"] = o.ToTime
	}
	if o.Safe != nil {
		toSerialize["Safe"] = o.Safe
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringQS struct {
	value *MonitoringQS
	isSet bool
}

func (v NullableMonitoringQS) Get() *MonitoringQS {
	return v.value
}

func (v *NullableMonitoringQS) Set(val *MonitoringQS) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringQS) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringQS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringQS(val *MonitoringQS) *NullableMonitoringQS {
	return &NullableMonitoringQS{value: val, isSet: true}
}

func (v NullableMonitoringQS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringQS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


