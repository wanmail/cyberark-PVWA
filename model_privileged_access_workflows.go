/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrivilegedAccessWorkflows struct for PrivilegedAccessWorkflows
type PrivilegedAccessWorkflows struct {
	// Indicates whether accounts associated with this platform require dual control. valid values: true\\false
	RequireDualControlPasswordAccessApproval *bool `json:"requireDualControlPasswordAccessApproval,omitempty"`
	// Indicates whether the Enforce check-in/check-out exclusive access rule is active or inactive for this platform. valid values: true\\false
	EnforceCheckinCheckoutExclusiveAccess *bool `json:"enforceCheckinCheckoutExclusiveAccess,omitempty"`
	// Indicates whether the Enforce one-time password access rule is active for this platform. valid values: true\\false
	EnforceOnetimePasswordAccess *bool `json:"enforceOnetimePasswordAccess,omitempty"`
}

// NewPrivilegedAccessWorkflows instantiates a new PrivilegedAccessWorkflows object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegedAccessWorkflows() *PrivilegedAccessWorkflows {
	this := PrivilegedAccessWorkflows{}
	return &this
}

// NewPrivilegedAccessWorkflowsWithDefaults instantiates a new PrivilegedAccessWorkflows object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegedAccessWorkflowsWithDefaults() *PrivilegedAccessWorkflows {
	this := PrivilegedAccessWorkflows{}
	return &this
}

// GetRequireDualControlPasswordAccessApproval returns the RequireDualControlPasswordAccessApproval field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflows) GetRequireDualControlPasswordAccessApproval() bool {
	if o == nil || o.RequireDualControlPasswordAccessApproval == nil {
		var ret bool
		return ret
	}
	return *o.RequireDualControlPasswordAccessApproval
}

// GetRequireDualControlPasswordAccessApprovalOk returns a tuple with the RequireDualControlPasswordAccessApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflows) GetRequireDualControlPasswordAccessApprovalOk() (*bool, bool) {
	if o == nil || o.RequireDualControlPasswordAccessApproval == nil {
		return nil, false
	}
	return o.RequireDualControlPasswordAccessApproval, true
}

// HasRequireDualControlPasswordAccessApproval returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflows) HasRequireDualControlPasswordAccessApproval() bool {
	if o != nil && o.RequireDualControlPasswordAccessApproval != nil {
		return true
	}

	return false
}

// SetRequireDualControlPasswordAccessApproval gets a reference to the given bool and assigns it to the RequireDualControlPasswordAccessApproval field.
func (o *PrivilegedAccessWorkflows) SetRequireDualControlPasswordAccessApproval(v bool) {
	o.RequireDualControlPasswordAccessApproval = &v
}

// GetEnforceCheckinCheckoutExclusiveAccess returns the EnforceCheckinCheckoutExclusiveAccess field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflows) GetEnforceCheckinCheckoutExclusiveAccess() bool {
	if o == nil || o.EnforceCheckinCheckoutExclusiveAccess == nil {
		var ret bool
		return ret
	}
	return *o.EnforceCheckinCheckoutExclusiveAccess
}

// GetEnforceCheckinCheckoutExclusiveAccessOk returns a tuple with the EnforceCheckinCheckoutExclusiveAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflows) GetEnforceCheckinCheckoutExclusiveAccessOk() (*bool, bool) {
	if o == nil || o.EnforceCheckinCheckoutExclusiveAccess == nil {
		return nil, false
	}
	return o.EnforceCheckinCheckoutExclusiveAccess, true
}

// HasEnforceCheckinCheckoutExclusiveAccess returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflows) HasEnforceCheckinCheckoutExclusiveAccess() bool {
	if o != nil && o.EnforceCheckinCheckoutExclusiveAccess != nil {
		return true
	}

	return false
}

// SetEnforceCheckinCheckoutExclusiveAccess gets a reference to the given bool and assigns it to the EnforceCheckinCheckoutExclusiveAccess field.
func (o *PrivilegedAccessWorkflows) SetEnforceCheckinCheckoutExclusiveAccess(v bool) {
	o.EnforceCheckinCheckoutExclusiveAccess = &v
}

// GetEnforceOnetimePasswordAccess returns the EnforceOnetimePasswordAccess field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflows) GetEnforceOnetimePasswordAccess() bool {
	if o == nil || o.EnforceOnetimePasswordAccess == nil {
		var ret bool
		return ret
	}
	return *o.EnforceOnetimePasswordAccess
}

// GetEnforceOnetimePasswordAccessOk returns a tuple with the EnforceOnetimePasswordAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflows) GetEnforceOnetimePasswordAccessOk() (*bool, bool) {
	if o == nil || o.EnforceOnetimePasswordAccess == nil {
		return nil, false
	}
	return o.EnforceOnetimePasswordAccess, true
}

// HasEnforceOnetimePasswordAccess returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflows) HasEnforceOnetimePasswordAccess() bool {
	if o != nil && o.EnforceOnetimePasswordAccess != nil {
		return true
	}

	return false
}

// SetEnforceOnetimePasswordAccess gets a reference to the given bool and assigns it to the EnforceOnetimePasswordAccess field.
func (o *PrivilegedAccessWorkflows) SetEnforceOnetimePasswordAccess(v bool) {
	o.EnforceOnetimePasswordAccess = &v
}

func (o PrivilegedAccessWorkflows) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequireDualControlPasswordAccessApproval != nil {
		toSerialize["requireDualControlPasswordAccessApproval"] = o.RequireDualControlPasswordAccessApproval
	}
	if o.EnforceCheckinCheckoutExclusiveAccess != nil {
		toSerialize["enforceCheckinCheckoutExclusiveAccess"] = o.EnforceCheckinCheckoutExclusiveAccess
	}
	if o.EnforceOnetimePasswordAccess != nil {
		toSerialize["enforceOnetimePasswordAccess"] = o.EnforceOnetimePasswordAccess
	}
	return json.Marshal(toSerialize)
}

type NullablePrivilegedAccessWorkflows struct {
	value *PrivilegedAccessWorkflows
	isSet bool
}

func (v NullablePrivilegedAccessWorkflows) Get() *PrivilegedAccessWorkflows {
	return v.value
}

func (v *NullablePrivilegedAccessWorkflows) Set(val *PrivilegedAccessWorkflows) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedAccessWorkflows) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedAccessWorkflows) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedAccessWorkflows(val *PrivilegedAccessWorkflows) *NullablePrivilegedAccessWorkflows {
	return &NullablePrivilegedAccessWorkflows{value: val, isSet: true}
}

func (v NullablePrivilegedAccessWorkflows) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedAccessWorkflows) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


