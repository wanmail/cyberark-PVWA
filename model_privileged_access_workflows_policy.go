/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrivilegedAccessWorkflowsPolicy struct for PrivilegedAccessWorkflowsPolicy
type PrivilegedAccessWorkflowsPolicy struct {
	RequireDualControlPasswordAccessApproval *WorkflowPolicy `json:"RequireDualControlPasswordAccessApproval,omitempty"`
	EnforceCheckinCheckoutExclusiveAccess *WorkflowPolicy `json:"EnforceCheckinCheckoutExclusiveAccess,omitempty"`
	EnforceOnetimePasswordAccess *WorkflowPolicy `json:"EnforceOnetimePasswordAccess,omitempty"`
	RequireUsersToSpecifyReasonForAccess *WorkflowPolicy `json:"RequireUsersToSpecifyReasonForAccess,omitempty"`
}

// NewPrivilegedAccessWorkflowsPolicy instantiates a new PrivilegedAccessWorkflowsPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegedAccessWorkflowsPolicy() *PrivilegedAccessWorkflowsPolicy {
	this := PrivilegedAccessWorkflowsPolicy{}
	return &this
}

// NewPrivilegedAccessWorkflowsPolicyWithDefaults instantiates a new PrivilegedAccessWorkflowsPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegedAccessWorkflowsPolicyWithDefaults() *PrivilegedAccessWorkflowsPolicy {
	this := PrivilegedAccessWorkflowsPolicy{}
	return &this
}

// GetRequireDualControlPasswordAccessApproval returns the RequireDualControlPasswordAccessApproval field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflowsPolicy) GetRequireDualControlPasswordAccessApproval() WorkflowPolicy {
	if o == nil || o.RequireDualControlPasswordAccessApproval == nil {
		var ret WorkflowPolicy
		return ret
	}
	return *o.RequireDualControlPasswordAccessApproval
}

// GetRequireDualControlPasswordAccessApprovalOk returns a tuple with the RequireDualControlPasswordAccessApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflowsPolicy) GetRequireDualControlPasswordAccessApprovalOk() (*WorkflowPolicy, bool) {
	if o == nil || o.RequireDualControlPasswordAccessApproval == nil {
		return nil, false
	}
	return o.RequireDualControlPasswordAccessApproval, true
}

// HasRequireDualControlPasswordAccessApproval returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflowsPolicy) HasRequireDualControlPasswordAccessApproval() bool {
	if o != nil && o.RequireDualControlPasswordAccessApproval != nil {
		return true
	}

	return false
}

// SetRequireDualControlPasswordAccessApproval gets a reference to the given WorkflowPolicy and assigns it to the RequireDualControlPasswordAccessApproval field.
func (o *PrivilegedAccessWorkflowsPolicy) SetRequireDualControlPasswordAccessApproval(v WorkflowPolicy) {
	o.RequireDualControlPasswordAccessApproval = &v
}

// GetEnforceCheckinCheckoutExclusiveAccess returns the EnforceCheckinCheckoutExclusiveAccess field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflowsPolicy) GetEnforceCheckinCheckoutExclusiveAccess() WorkflowPolicy {
	if o == nil || o.EnforceCheckinCheckoutExclusiveAccess == nil {
		var ret WorkflowPolicy
		return ret
	}
	return *o.EnforceCheckinCheckoutExclusiveAccess
}

// GetEnforceCheckinCheckoutExclusiveAccessOk returns a tuple with the EnforceCheckinCheckoutExclusiveAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflowsPolicy) GetEnforceCheckinCheckoutExclusiveAccessOk() (*WorkflowPolicy, bool) {
	if o == nil || o.EnforceCheckinCheckoutExclusiveAccess == nil {
		return nil, false
	}
	return o.EnforceCheckinCheckoutExclusiveAccess, true
}

// HasEnforceCheckinCheckoutExclusiveAccess returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflowsPolicy) HasEnforceCheckinCheckoutExclusiveAccess() bool {
	if o != nil && o.EnforceCheckinCheckoutExclusiveAccess != nil {
		return true
	}

	return false
}

// SetEnforceCheckinCheckoutExclusiveAccess gets a reference to the given WorkflowPolicy and assigns it to the EnforceCheckinCheckoutExclusiveAccess field.
func (o *PrivilegedAccessWorkflowsPolicy) SetEnforceCheckinCheckoutExclusiveAccess(v WorkflowPolicy) {
	o.EnforceCheckinCheckoutExclusiveAccess = &v
}

// GetEnforceOnetimePasswordAccess returns the EnforceOnetimePasswordAccess field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflowsPolicy) GetEnforceOnetimePasswordAccess() WorkflowPolicy {
	if o == nil || o.EnforceOnetimePasswordAccess == nil {
		var ret WorkflowPolicy
		return ret
	}
	return *o.EnforceOnetimePasswordAccess
}

// GetEnforceOnetimePasswordAccessOk returns a tuple with the EnforceOnetimePasswordAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflowsPolicy) GetEnforceOnetimePasswordAccessOk() (*WorkflowPolicy, bool) {
	if o == nil || o.EnforceOnetimePasswordAccess == nil {
		return nil, false
	}
	return o.EnforceOnetimePasswordAccess, true
}

// HasEnforceOnetimePasswordAccess returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflowsPolicy) HasEnforceOnetimePasswordAccess() bool {
	if o != nil && o.EnforceOnetimePasswordAccess != nil {
		return true
	}

	return false
}

// SetEnforceOnetimePasswordAccess gets a reference to the given WorkflowPolicy and assigns it to the EnforceOnetimePasswordAccess field.
func (o *PrivilegedAccessWorkflowsPolicy) SetEnforceOnetimePasswordAccess(v WorkflowPolicy) {
	o.EnforceOnetimePasswordAccess = &v
}

// GetRequireUsersToSpecifyReasonForAccess returns the RequireUsersToSpecifyReasonForAccess field value if set, zero value otherwise.
func (o *PrivilegedAccessWorkflowsPolicy) GetRequireUsersToSpecifyReasonForAccess() WorkflowPolicy {
	if o == nil || o.RequireUsersToSpecifyReasonForAccess == nil {
		var ret WorkflowPolicy
		return ret
	}
	return *o.RequireUsersToSpecifyReasonForAccess
}

// GetRequireUsersToSpecifyReasonForAccessOk returns a tuple with the RequireUsersToSpecifyReasonForAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccessWorkflowsPolicy) GetRequireUsersToSpecifyReasonForAccessOk() (*WorkflowPolicy, bool) {
	if o == nil || o.RequireUsersToSpecifyReasonForAccess == nil {
		return nil, false
	}
	return o.RequireUsersToSpecifyReasonForAccess, true
}

// HasRequireUsersToSpecifyReasonForAccess returns a boolean if a field has been set.
func (o *PrivilegedAccessWorkflowsPolicy) HasRequireUsersToSpecifyReasonForAccess() bool {
	if o != nil && o.RequireUsersToSpecifyReasonForAccess != nil {
		return true
	}

	return false
}

// SetRequireUsersToSpecifyReasonForAccess gets a reference to the given WorkflowPolicy and assigns it to the RequireUsersToSpecifyReasonForAccess field.
func (o *PrivilegedAccessWorkflowsPolicy) SetRequireUsersToSpecifyReasonForAccess(v WorkflowPolicy) {
	o.RequireUsersToSpecifyReasonForAccess = &v
}

func (o PrivilegedAccessWorkflowsPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequireDualControlPasswordAccessApproval != nil {
		toSerialize["RequireDualControlPasswordAccessApproval"] = o.RequireDualControlPasswordAccessApproval
	}
	if o.EnforceCheckinCheckoutExclusiveAccess != nil {
		toSerialize["EnforceCheckinCheckoutExclusiveAccess"] = o.EnforceCheckinCheckoutExclusiveAccess
	}
	if o.EnforceOnetimePasswordAccess != nil {
		toSerialize["EnforceOnetimePasswordAccess"] = o.EnforceOnetimePasswordAccess
	}
	if o.RequireUsersToSpecifyReasonForAccess != nil {
		toSerialize["RequireUsersToSpecifyReasonForAccess"] = o.RequireUsersToSpecifyReasonForAccess
	}
	return json.Marshal(toSerialize)
}

type NullablePrivilegedAccessWorkflowsPolicy struct {
	value *PrivilegedAccessWorkflowsPolicy
	isSet bool
}

func (v NullablePrivilegedAccessWorkflowsPolicy) Get() *PrivilegedAccessWorkflowsPolicy {
	return v.value
}

func (v *NullablePrivilegedAccessWorkflowsPolicy) Set(val *PrivilegedAccessWorkflowsPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedAccessWorkflowsPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedAccessWorkflowsPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedAccessWorkflowsPolicy(val *PrivilegedAccessWorkflowsPolicy) *NullablePrivilegedAccessWorkflowsPolicy {
	return &NullablePrivilegedAccessWorkflowsPolicy{value: val, isSet: true}
}

func (v NullablePrivilegedAccessWorkflowsPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedAccessWorkflowsPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


