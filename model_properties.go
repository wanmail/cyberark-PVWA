/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Properties struct for Properties
type Properties struct {
	// A list of all required properties defined for the platform. Each property includes a name and a display name
	Required []Identity `json:"required,omitempty"`
	// A list of all optional properties defined for the platform. Each property includes a name and a display name
	Optional []Identity `json:"optional,omitempty"`
}

// NewProperties instantiates a new Properties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProperties() *Properties {
	this := Properties{}
	return &this
}

// NewPropertiesWithDefaults instantiates a new Properties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertiesWithDefaults() *Properties {
	this := Properties{}
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *Properties) GetRequired() []Identity {
	if o == nil || o.Required == nil {
		var ret []Identity
		return ret
	}
	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Properties) GetRequiredOk() ([]Identity, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *Properties) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given []Identity and assigns it to the Required field.
func (o *Properties) SetRequired(v []Identity) {
	o.Required = v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *Properties) GetOptional() []Identity {
	if o == nil || o.Optional == nil {
		var ret []Identity
		return ret
	}
	return o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Properties) GetOptionalOk() ([]Identity, bool) {
	if o == nil || o.Optional == nil {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *Properties) HasOptional() bool {
	if o != nil && o.Optional != nil {
		return true
	}

	return false
}

// SetOptional gets a reference to the given []Identity and assigns it to the Optional field.
func (o *Properties) SetOptional(v []Identity) {
	o.Optional = v
}

func (o Properties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Optional != nil {
		toSerialize["optional"] = o.Optional
	}
	return json.Marshal(toSerialize)
}

type NullableProperties struct {
	value *Properties
	isSet bool
}

func (v NullableProperties) Get() *Properties {
	return v.value
}

func (v *NullableProperties) Set(val *Properties) {
	v.value = val
	v.isSet = true
}

func (v NullableProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProperties(val *Properties) *NullableProperties {
	return &NullableProperties{value: val, isSet: true}
}

func (v NullableProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


