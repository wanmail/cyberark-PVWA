/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PSMServer struct for PSMServer
type PSMServer struct {
	// PSM server Id.
	ID *string `json:"ID,omitempty"`
	// PSM server Name.
	Name *string `json:"Name,omitempty"`
	// PSM server address.
	Address *string `json:"Address,omitempty"`
}

// NewPSMServer instantiates a new PSMServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPSMServer() *PSMServer {
	this := PSMServer{}
	return &this
}

// NewPSMServerWithDefaults instantiates a new PSMServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPSMServerWithDefaults() *PSMServer {
	this := PSMServer{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *PSMServer) GetID() string {
	if o == nil || o.ID == nil {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PSMServer) GetIDOk() (*string, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *PSMServer) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *PSMServer) SetID(v string) {
	o.ID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PSMServer) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PSMServer) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PSMServer) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PSMServer) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PSMServer) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PSMServer) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PSMServer) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PSMServer) SetAddress(v string) {
	o.Address = &v
}

func (o PSMServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Address != nil {
		toSerialize["Address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullablePSMServer struct {
	value *PSMServer
	isSet bool
}

func (v NullablePSMServer) Get() *PSMServer {
	return v.value
}

func (v *NullablePSMServer) Set(val *PSMServer) {
	v.value = val
	v.isSet = true
}

func (v NullablePSMServer) IsSet() bool {
	return v.isSet
}

func (v *NullablePSMServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePSMServer(val *PSMServer) *NullablePSMServer {
	return &NullablePSMServer{value: val, isSet: true}
}

func (v NullablePSMServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePSMServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


