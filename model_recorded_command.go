/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecordedCommand struct for RecordedCommand
type RecordedCommand struct {
	ActivityText *string `json:"ActivityText,omitempty"`
	ActivityType *int32 `json:"ActivityType,omitempty"`
	ActivityId *string `json:"ActivityId,omitempty"`
	Formats []string `json:"Formats,omitempty"`
	Offsets *map[string]string `json:"Offsets,omitempty"`
}

// NewRecordedCommand instantiates a new RecordedCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordedCommand() *RecordedCommand {
	this := RecordedCommand{}
	return &this
}

// NewRecordedCommandWithDefaults instantiates a new RecordedCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordedCommandWithDefaults() *RecordedCommand {
	this := RecordedCommand{}
	return &this
}

// GetActivityText returns the ActivityText field value if set, zero value otherwise.
func (o *RecordedCommand) GetActivityText() string {
	if o == nil || o.ActivityText == nil {
		var ret string
		return ret
	}
	return *o.ActivityText
}

// GetActivityTextOk returns a tuple with the ActivityText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordedCommand) GetActivityTextOk() (*string, bool) {
	if o == nil || o.ActivityText == nil {
		return nil, false
	}
	return o.ActivityText, true
}

// HasActivityText returns a boolean if a field has been set.
func (o *RecordedCommand) HasActivityText() bool {
	if o != nil && o.ActivityText != nil {
		return true
	}

	return false
}

// SetActivityText gets a reference to the given string and assigns it to the ActivityText field.
func (o *RecordedCommand) SetActivityText(v string) {
	o.ActivityText = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *RecordedCommand) GetActivityType() int32 {
	if o == nil || o.ActivityType == nil {
		var ret int32
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordedCommand) GetActivityTypeOk() (*int32, bool) {
	if o == nil || o.ActivityType == nil {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *RecordedCommand) HasActivityType() bool {
	if o != nil && o.ActivityType != nil {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given int32 and assigns it to the ActivityType field.
func (o *RecordedCommand) SetActivityType(v int32) {
	o.ActivityType = &v
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *RecordedCommand) GetActivityId() string {
	if o == nil || o.ActivityId == nil {
		var ret string
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordedCommand) GetActivityIdOk() (*string, bool) {
	if o == nil || o.ActivityId == nil {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *RecordedCommand) HasActivityId() bool {
	if o != nil && o.ActivityId != nil {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given string and assigns it to the ActivityId field.
func (o *RecordedCommand) SetActivityId(v string) {
	o.ActivityId = &v
}

// GetFormats returns the Formats field value if set, zero value otherwise.
func (o *RecordedCommand) GetFormats() []string {
	if o == nil || o.Formats == nil {
		var ret []string
		return ret
	}
	return o.Formats
}

// GetFormatsOk returns a tuple with the Formats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordedCommand) GetFormatsOk() ([]string, bool) {
	if o == nil || o.Formats == nil {
		return nil, false
	}
	return o.Formats, true
}

// HasFormats returns a boolean if a field has been set.
func (o *RecordedCommand) HasFormats() bool {
	if o != nil && o.Formats != nil {
		return true
	}

	return false
}

// SetFormats gets a reference to the given []string and assigns it to the Formats field.
func (o *RecordedCommand) SetFormats(v []string) {
	o.Formats = v
}

// GetOffsets returns the Offsets field value if set, zero value otherwise.
func (o *RecordedCommand) GetOffsets() map[string]string {
	if o == nil || o.Offsets == nil {
		var ret map[string]string
		return ret
	}
	return *o.Offsets
}

// GetOffsetsOk returns a tuple with the Offsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordedCommand) GetOffsetsOk() (*map[string]string, bool) {
	if o == nil || o.Offsets == nil {
		return nil, false
	}
	return o.Offsets, true
}

// HasOffsets returns a boolean if a field has been set.
func (o *RecordedCommand) HasOffsets() bool {
	if o != nil && o.Offsets != nil {
		return true
	}

	return false
}

// SetOffsets gets a reference to the given map[string]string and assigns it to the Offsets field.
func (o *RecordedCommand) SetOffsets(v map[string]string) {
	o.Offsets = &v
}

func (o RecordedCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivityText != nil {
		toSerialize["ActivityText"] = o.ActivityText
	}
	if o.ActivityType != nil {
		toSerialize["ActivityType"] = o.ActivityType
	}
	if o.ActivityId != nil {
		toSerialize["ActivityId"] = o.ActivityId
	}
	if o.Formats != nil {
		toSerialize["Formats"] = o.Formats
	}
	if o.Offsets != nil {
		toSerialize["Offsets"] = o.Offsets
	}
	return json.Marshal(toSerialize)
}

type NullableRecordedCommand struct {
	value *RecordedCommand
	isSet bool
}

func (v NullableRecordedCommand) Get() *RecordedCommand {
	return v.value
}

func (v *NullableRecordedCommand) Set(val *RecordedCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordedCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordedCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordedCommand(val *RecordedCommand) *NullableRecordedCommand {
	return &NullableRecordedCommand{value: val, isSet: true}
}

func (v NullableRecordedCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordedCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


