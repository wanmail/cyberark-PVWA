/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecordingFile struct for RecordingFile
type RecordingFile struct {
	FileName *string `json:"FileName,omitempty"`
	RecordingType *int32 `json:"RecordingType,omitempty"`
	LastReviewBy *string `json:"LastReviewBy,omitempty"`
	LastReviewDate *int64 `json:"LastReviewDate,omitempty"`
	FileSize *int64 `json:"FileSize,omitempty"`
	CompressedFileSize *int64 `json:"CompressedFileSize,omitempty"`
	Format *string `json:"Format,omitempty"`
}

// NewRecordingFile instantiates a new RecordingFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingFile() *RecordingFile {
	this := RecordingFile{}
	return &this
}

// NewRecordingFileWithDefaults instantiates a new RecordingFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingFileWithDefaults() *RecordingFile {
	this := RecordingFile{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *RecordingFile) GetFileName() string {
	if o == nil || o.FileName == nil {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetFileNameOk() (*string, bool) {
	if o == nil || o.FileName == nil {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *RecordingFile) HasFileName() bool {
	if o != nil && o.FileName != nil {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *RecordingFile) SetFileName(v string) {
	o.FileName = &v
}

// GetRecordingType returns the RecordingType field value if set, zero value otherwise.
func (o *RecordingFile) GetRecordingType() int32 {
	if o == nil || o.RecordingType == nil {
		var ret int32
		return ret
	}
	return *o.RecordingType
}

// GetRecordingTypeOk returns a tuple with the RecordingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetRecordingTypeOk() (*int32, bool) {
	if o == nil || o.RecordingType == nil {
		return nil, false
	}
	return o.RecordingType, true
}

// HasRecordingType returns a boolean if a field has been set.
func (o *RecordingFile) HasRecordingType() bool {
	if o != nil && o.RecordingType != nil {
		return true
	}

	return false
}

// SetRecordingType gets a reference to the given int32 and assigns it to the RecordingType field.
func (o *RecordingFile) SetRecordingType(v int32) {
	o.RecordingType = &v
}

// GetLastReviewBy returns the LastReviewBy field value if set, zero value otherwise.
func (o *RecordingFile) GetLastReviewBy() string {
	if o == nil || o.LastReviewBy == nil {
		var ret string
		return ret
	}
	return *o.LastReviewBy
}

// GetLastReviewByOk returns a tuple with the LastReviewBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetLastReviewByOk() (*string, bool) {
	if o == nil || o.LastReviewBy == nil {
		return nil, false
	}
	return o.LastReviewBy, true
}

// HasLastReviewBy returns a boolean if a field has been set.
func (o *RecordingFile) HasLastReviewBy() bool {
	if o != nil && o.LastReviewBy != nil {
		return true
	}

	return false
}

// SetLastReviewBy gets a reference to the given string and assigns it to the LastReviewBy field.
func (o *RecordingFile) SetLastReviewBy(v string) {
	o.LastReviewBy = &v
}

// GetLastReviewDate returns the LastReviewDate field value if set, zero value otherwise.
func (o *RecordingFile) GetLastReviewDate() int64 {
	if o == nil || o.LastReviewDate == nil {
		var ret int64
		return ret
	}
	return *o.LastReviewDate
}

// GetLastReviewDateOk returns a tuple with the LastReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetLastReviewDateOk() (*int64, bool) {
	if o == nil || o.LastReviewDate == nil {
		return nil, false
	}
	return o.LastReviewDate, true
}

// HasLastReviewDate returns a boolean if a field has been set.
func (o *RecordingFile) HasLastReviewDate() bool {
	if o != nil && o.LastReviewDate != nil {
		return true
	}

	return false
}

// SetLastReviewDate gets a reference to the given int64 and assigns it to the LastReviewDate field.
func (o *RecordingFile) SetLastReviewDate(v int64) {
	o.LastReviewDate = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *RecordingFile) GetFileSize() int64 {
	if o == nil || o.FileSize == nil {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetFileSizeOk() (*int64, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *RecordingFile) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *RecordingFile) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetCompressedFileSize returns the CompressedFileSize field value if set, zero value otherwise.
func (o *RecordingFile) GetCompressedFileSize() int64 {
	if o == nil || o.CompressedFileSize == nil {
		var ret int64
		return ret
	}
	return *o.CompressedFileSize
}

// GetCompressedFileSizeOk returns a tuple with the CompressedFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetCompressedFileSizeOk() (*int64, bool) {
	if o == nil || o.CompressedFileSize == nil {
		return nil, false
	}
	return o.CompressedFileSize, true
}

// HasCompressedFileSize returns a boolean if a field has been set.
func (o *RecordingFile) HasCompressedFileSize() bool {
	if o != nil && o.CompressedFileSize != nil {
		return true
	}

	return false
}

// SetCompressedFileSize gets a reference to the given int64 and assigns it to the CompressedFileSize field.
func (o *RecordingFile) SetCompressedFileSize(v int64) {
	o.CompressedFileSize = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *RecordingFile) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFile) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *RecordingFile) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *RecordingFile) SetFormat(v string) {
	o.Format = &v
}

func (o RecordingFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileName != nil {
		toSerialize["FileName"] = o.FileName
	}
	if o.RecordingType != nil {
		toSerialize["RecordingType"] = o.RecordingType
	}
	if o.LastReviewBy != nil {
		toSerialize["LastReviewBy"] = o.LastReviewBy
	}
	if o.LastReviewDate != nil {
		toSerialize["LastReviewDate"] = o.LastReviewDate
	}
	if o.FileSize != nil {
		toSerialize["FileSize"] = o.FileSize
	}
	if o.CompressedFileSize != nil {
		toSerialize["CompressedFileSize"] = o.CompressedFileSize
	}
	if o.Format != nil {
		toSerialize["Format"] = o.Format
	}
	return json.Marshal(toSerialize)
}

type NullableRecordingFile struct {
	value *RecordingFile
	isSet bool
}

func (v NullableRecordingFile) Get() *RecordingFile {
	return v.value
}

func (v *NullableRecordingFile) Set(val *RecordingFile) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingFile) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingFile(val *RecordingFile) *NullableRecordingFile {
	return &NullableRecordingFile{value: val, isSet: true}
}

func (v NullableRecordingFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


