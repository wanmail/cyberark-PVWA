/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResetUserPassword struct for ResetUserPassword
type ResetUserPassword struct {
	// The user's new password.  The new password maximum length is up to 39 (including) characters and it must meet the password policy requirements.
	NewPassword string `json:"newPassword"`
}

// NewResetUserPassword instantiates a new ResetUserPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetUserPassword(newPassword string) *ResetUserPassword {
	this := ResetUserPassword{}
	this.NewPassword = newPassword
	return &this
}

// NewResetUserPasswordWithDefaults instantiates a new ResetUserPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetUserPasswordWithDefaults() *ResetUserPassword {
	this := ResetUserPassword{}
	return &this
}

// GetNewPassword returns the NewPassword field value
func (o *ResetUserPassword) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *ResetUserPassword) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *ResetUserPassword) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o ResetUserPassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["newPassword"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullableResetUserPassword struct {
	value *ResetUserPassword
	isSet bool
}

func (v NullableResetUserPassword) Get() *ResetUserPassword {
	return v.value
}

func (v *NullableResetUserPassword) Set(val *ResetUserPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableResetUserPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableResetUserPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetUserPassword(val *ResetUserPassword) *NullableResetUserPassword {
	return &NullableResetUserPassword{value: val, isSet: true}
}

func (v NullableResetUserPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetUserPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


