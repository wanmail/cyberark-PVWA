/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SafeMemberResponse struct for SafeMemberResponse
type SafeMemberResponse struct {
	// The unique ID of the Safe to be used when calling Safes APIs.
	SafeUrlId *string `json:"safeUrlId,omitempty"`
	// The name of the Safe.
	SafeName *string `json:"safeName,omitempty"`
	// The unique numerical ID of the Safe.
	SafeNumber *int64 `json:"safeNumber,omitempty"`
	// Vault user Id, Domain user Id or group Id of the Safe member.
	MemberId *int64 `json:"memberId,omitempty"`
	// Vault user name, Domain user name or group name of the Safe member.
	MemberName *string `json:"memberName,omitempty"`
	// The member type.  Valid values: user\\group
	MemberType *string `json:"memberType,omitempty"`
	// The members expiration date for this Safe.  For members that will never expire, this value will be null.
	MembershipExpirationDate *int64 `json:"membershipExpirationDate,omitempty"`
	// Whether the membership on the safe is expired or not. For expired members the value will be true.
	IsExpiredMembershipEnable *bool `json:"isExpiredMembershipEnable,omitempty"`
	// Whether the member is a vault built-in user or group.
	IsPredefinedUser *bool `json:"isPredefinedUser,omitempty"`
	// Whether or not the current user can update the permissions of the member
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	Permissions *map[string]bool `json:"permissions,omitempty"`
}

// NewSafeMemberResponse instantiates a new SafeMemberResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeMemberResponse() *SafeMemberResponse {
	this := SafeMemberResponse{}
	return &this
}

// NewSafeMemberResponseWithDefaults instantiates a new SafeMemberResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeMemberResponseWithDefaults() *SafeMemberResponse {
	this := SafeMemberResponse{}
	return &this
}

// GetSafeUrlId returns the SafeUrlId field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetSafeUrlId() string {
	if o == nil || o.SafeUrlId == nil {
		var ret string
		return ret
	}
	return *o.SafeUrlId
}

// GetSafeUrlIdOk returns a tuple with the SafeUrlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetSafeUrlIdOk() (*string, bool) {
	if o == nil || o.SafeUrlId == nil {
		return nil, false
	}
	return o.SafeUrlId, true
}

// HasSafeUrlId returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasSafeUrlId() bool {
	if o != nil && o.SafeUrlId != nil {
		return true
	}

	return false
}

// SetSafeUrlId gets a reference to the given string and assigns it to the SafeUrlId field.
func (o *SafeMemberResponse) SetSafeUrlId(v string) {
	o.SafeUrlId = &v
}

// GetSafeName returns the SafeName field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetSafeName() string {
	if o == nil || o.SafeName == nil {
		var ret string
		return ret
	}
	return *o.SafeName
}

// GetSafeNameOk returns a tuple with the SafeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetSafeNameOk() (*string, bool) {
	if o == nil || o.SafeName == nil {
		return nil, false
	}
	return o.SafeName, true
}

// HasSafeName returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasSafeName() bool {
	if o != nil && o.SafeName != nil {
		return true
	}

	return false
}

// SetSafeName gets a reference to the given string and assigns it to the SafeName field.
func (o *SafeMemberResponse) SetSafeName(v string) {
	o.SafeName = &v
}

// GetSafeNumber returns the SafeNumber field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetSafeNumber() int64 {
	if o == nil || o.SafeNumber == nil {
		var ret int64
		return ret
	}
	return *o.SafeNumber
}

// GetSafeNumberOk returns a tuple with the SafeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetSafeNumberOk() (*int64, bool) {
	if o == nil || o.SafeNumber == nil {
		return nil, false
	}
	return o.SafeNumber, true
}

// HasSafeNumber returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasSafeNumber() bool {
	if o != nil && o.SafeNumber != nil {
		return true
	}

	return false
}

// SetSafeNumber gets a reference to the given int64 and assigns it to the SafeNumber field.
func (o *SafeMemberResponse) SetSafeNumber(v int64) {
	o.SafeNumber = &v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetMemberId() int64 {
	if o == nil || o.MemberId == nil {
		var ret int64
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetMemberIdOk() (*int64, bool) {
	if o == nil || o.MemberId == nil {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasMemberId() bool {
	if o != nil && o.MemberId != nil {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given int64 and assigns it to the MemberId field.
func (o *SafeMemberResponse) SetMemberId(v int64) {
	o.MemberId = &v
}

// GetMemberName returns the MemberName field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetMemberName() string {
	if o == nil || o.MemberName == nil {
		var ret string
		return ret
	}
	return *o.MemberName
}

// GetMemberNameOk returns a tuple with the MemberName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetMemberNameOk() (*string, bool) {
	if o == nil || o.MemberName == nil {
		return nil, false
	}
	return o.MemberName, true
}

// HasMemberName returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasMemberName() bool {
	if o != nil && o.MemberName != nil {
		return true
	}

	return false
}

// SetMemberName gets a reference to the given string and assigns it to the MemberName field.
func (o *SafeMemberResponse) SetMemberName(v string) {
	o.MemberName = &v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetMemberType() string {
	if o == nil || o.MemberType == nil {
		var ret string
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetMemberTypeOk() (*string, bool) {
	if o == nil || o.MemberType == nil {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasMemberType() bool {
	if o != nil && o.MemberType != nil {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given string and assigns it to the MemberType field.
func (o *SafeMemberResponse) SetMemberType(v string) {
	o.MemberType = &v
}

// GetMembershipExpirationDate returns the MembershipExpirationDate field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetMembershipExpirationDate() int64 {
	if o == nil || o.MembershipExpirationDate == nil {
		var ret int64
		return ret
	}
	return *o.MembershipExpirationDate
}

// GetMembershipExpirationDateOk returns a tuple with the MembershipExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetMembershipExpirationDateOk() (*int64, bool) {
	if o == nil || o.MembershipExpirationDate == nil {
		return nil, false
	}
	return o.MembershipExpirationDate, true
}

// HasMembershipExpirationDate returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasMembershipExpirationDate() bool {
	if o != nil && o.MembershipExpirationDate != nil {
		return true
	}

	return false
}

// SetMembershipExpirationDate gets a reference to the given int64 and assigns it to the MembershipExpirationDate field.
func (o *SafeMemberResponse) SetMembershipExpirationDate(v int64) {
	o.MembershipExpirationDate = &v
}

// GetIsExpiredMembershipEnable returns the IsExpiredMembershipEnable field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetIsExpiredMembershipEnable() bool {
	if o == nil || o.IsExpiredMembershipEnable == nil {
		var ret bool
		return ret
	}
	return *o.IsExpiredMembershipEnable
}

// GetIsExpiredMembershipEnableOk returns a tuple with the IsExpiredMembershipEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetIsExpiredMembershipEnableOk() (*bool, bool) {
	if o == nil || o.IsExpiredMembershipEnable == nil {
		return nil, false
	}
	return o.IsExpiredMembershipEnable, true
}

// HasIsExpiredMembershipEnable returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasIsExpiredMembershipEnable() bool {
	if o != nil && o.IsExpiredMembershipEnable != nil {
		return true
	}

	return false
}

// SetIsExpiredMembershipEnable gets a reference to the given bool and assigns it to the IsExpiredMembershipEnable field.
func (o *SafeMemberResponse) SetIsExpiredMembershipEnable(v bool) {
	o.IsExpiredMembershipEnable = &v
}

// GetIsPredefinedUser returns the IsPredefinedUser field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetIsPredefinedUser() bool {
	if o == nil || o.IsPredefinedUser == nil {
		var ret bool
		return ret
	}
	return *o.IsPredefinedUser
}

// GetIsPredefinedUserOk returns a tuple with the IsPredefinedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetIsPredefinedUserOk() (*bool, bool) {
	if o == nil || o.IsPredefinedUser == nil {
		return nil, false
	}
	return o.IsPredefinedUser, true
}

// HasIsPredefinedUser returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasIsPredefinedUser() bool {
	if o != nil && o.IsPredefinedUser != nil {
		return true
	}

	return false
}

// SetIsPredefinedUser gets a reference to the given bool and assigns it to the IsPredefinedUser field.
func (o *SafeMemberResponse) SetIsPredefinedUser(v bool) {
	o.IsPredefinedUser = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || o.IsReadOnly == nil {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly != nil {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *SafeMemberResponse) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *SafeMemberResponse) GetPermissions() map[string]bool {
	if o == nil || o.Permissions == nil {
		var ret map[string]bool
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberResponse) GetPermissionsOk() (*map[string]bool, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *SafeMemberResponse) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]bool and assigns it to the Permissions field.
func (o *SafeMemberResponse) SetPermissions(v map[string]bool) {
	o.Permissions = &v
}

func (o SafeMemberResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SafeUrlId != nil {
		toSerialize["safeUrlId"] = o.SafeUrlId
	}
	if o.SafeName != nil {
		toSerialize["safeName"] = o.SafeName
	}
	if o.SafeNumber != nil {
		toSerialize["safeNumber"] = o.SafeNumber
	}
	if o.MemberId != nil {
		toSerialize["memberId"] = o.MemberId
	}
	if o.MemberName != nil {
		toSerialize["memberName"] = o.MemberName
	}
	if o.MemberType != nil {
		toSerialize["memberType"] = o.MemberType
	}
	if o.MembershipExpirationDate != nil {
		toSerialize["membershipExpirationDate"] = o.MembershipExpirationDate
	}
	if o.IsExpiredMembershipEnable != nil {
		toSerialize["isExpiredMembershipEnable"] = o.IsExpiredMembershipEnable
	}
	if o.IsPredefinedUser != nil {
		toSerialize["isPredefinedUser"] = o.IsPredefinedUser
	}
	if o.IsReadOnly != nil {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableSafeMemberResponse struct {
	value *SafeMemberResponse
	isSet bool
}

func (v NullableSafeMemberResponse) Get() *SafeMemberResponse {
	return v.value
}

func (v *NullableSafeMemberResponse) Set(val *SafeMemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeMemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeMemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeMemberResponse(val *SafeMemberResponse) *NullableSafeMemberResponse {
	return &NullableSafeMemberResponse{value: val, isSet: true}
}

func (v NullableSafeMemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeMemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


