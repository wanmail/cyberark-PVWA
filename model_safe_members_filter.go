/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SafeMembersFilter struct for SafeMembersFilter
type SafeMembersFilter struct {
	// <para>Filtering according to REST standard. </para>  <para>memberType - Return only members of single type (user or group)</para>  <para>membershipExpired - Return only members that have or don't have an expired membership</para>  <para>includePredefinedUsers - Include predefined users in the returned list.</para>
	Filter *string `json:"filter,omitempty"`
}

// NewSafeMembersFilter instantiates a new SafeMembersFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeMembersFilter() *SafeMembersFilter {
	this := SafeMembersFilter{}
	return &this
}

// NewSafeMembersFilterWithDefaults instantiates a new SafeMembersFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeMembersFilterWithDefaults() *SafeMembersFilter {
	this := SafeMembersFilter{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SafeMembersFilter) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMembersFilter) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SafeMembersFilter) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *SafeMembersFilter) SetFilter(v string) {
	o.Filter = &v
}

func (o SafeMembersFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableSafeMembersFilter struct {
	value *SafeMembersFilter
	isSet bool
}

func (v NullableSafeMembersFilter) Get() *SafeMembersFilter {
	return v.value
}

func (v *NullableSafeMembersFilter) Set(val *SafeMembersFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeMembersFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeMembersFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeMembersFilter(val *SafeMembersFilter) *NullableSafeMembersFilter {
	return &NullableSafeMembersFilter{value: val, isSet: true}
}

func (v NullableSafeMembersFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeMembersFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


