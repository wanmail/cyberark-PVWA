/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SessionManagement struct for SessionManagement
type SessionManagement struct {
	// Indicates whether the Require privileged session monitoring and isolation rule is active for this platform. valid values: true\\false
	RequirePrivilegedSessionMonitoringAndIsolation *bool `json:"requirePrivilegedSessionMonitoringAndIsolation,omitempty"`
	// Indicates whether the Record and save session activity rule is active for this platform. valid values: true\\false
	RecordAndSaveSessionActivity *bool `json:"recordAndSaveSessionActivity,omitempty"`
	// The unique ID of a PSM Server
	PSMServerID *string `json:"PSMServerID,omitempty"`
}

// NewSessionManagement instantiates a new SessionManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionManagement() *SessionManagement {
	this := SessionManagement{}
	return &this
}

// NewSessionManagementWithDefaults instantiates a new SessionManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionManagementWithDefaults() *SessionManagement {
	this := SessionManagement{}
	return &this
}

// GetRequirePrivilegedSessionMonitoringAndIsolation returns the RequirePrivilegedSessionMonitoringAndIsolation field value if set, zero value otherwise.
func (o *SessionManagement) GetRequirePrivilegedSessionMonitoringAndIsolation() bool {
	if o == nil || o.RequirePrivilegedSessionMonitoringAndIsolation == nil {
		var ret bool
		return ret
	}
	return *o.RequirePrivilegedSessionMonitoringAndIsolation
}

// GetRequirePrivilegedSessionMonitoringAndIsolationOk returns a tuple with the RequirePrivilegedSessionMonitoringAndIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetRequirePrivilegedSessionMonitoringAndIsolationOk() (*bool, bool) {
	if o == nil || o.RequirePrivilegedSessionMonitoringAndIsolation == nil {
		return nil, false
	}
	return o.RequirePrivilegedSessionMonitoringAndIsolation, true
}

// HasRequirePrivilegedSessionMonitoringAndIsolation returns a boolean if a field has been set.
func (o *SessionManagement) HasRequirePrivilegedSessionMonitoringAndIsolation() bool {
	if o != nil && o.RequirePrivilegedSessionMonitoringAndIsolation != nil {
		return true
	}

	return false
}

// SetRequirePrivilegedSessionMonitoringAndIsolation gets a reference to the given bool and assigns it to the RequirePrivilegedSessionMonitoringAndIsolation field.
func (o *SessionManagement) SetRequirePrivilegedSessionMonitoringAndIsolation(v bool) {
	o.RequirePrivilegedSessionMonitoringAndIsolation = &v
}

// GetRecordAndSaveSessionActivity returns the RecordAndSaveSessionActivity field value if set, zero value otherwise.
func (o *SessionManagement) GetRecordAndSaveSessionActivity() bool {
	if o == nil || o.RecordAndSaveSessionActivity == nil {
		var ret bool
		return ret
	}
	return *o.RecordAndSaveSessionActivity
}

// GetRecordAndSaveSessionActivityOk returns a tuple with the RecordAndSaveSessionActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetRecordAndSaveSessionActivityOk() (*bool, bool) {
	if o == nil || o.RecordAndSaveSessionActivity == nil {
		return nil, false
	}
	return o.RecordAndSaveSessionActivity, true
}

// HasRecordAndSaveSessionActivity returns a boolean if a field has been set.
func (o *SessionManagement) HasRecordAndSaveSessionActivity() bool {
	if o != nil && o.RecordAndSaveSessionActivity != nil {
		return true
	}

	return false
}

// SetRecordAndSaveSessionActivity gets a reference to the given bool and assigns it to the RecordAndSaveSessionActivity field.
func (o *SessionManagement) SetRecordAndSaveSessionActivity(v bool) {
	o.RecordAndSaveSessionActivity = &v
}

// GetPSMServerID returns the PSMServerID field value if set, zero value otherwise.
func (o *SessionManagement) GetPSMServerID() string {
	if o == nil || o.PSMServerID == nil {
		var ret string
		return ret
	}
	return *o.PSMServerID
}

// GetPSMServerIDOk returns a tuple with the PSMServerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetPSMServerIDOk() (*string, bool) {
	if o == nil || o.PSMServerID == nil {
		return nil, false
	}
	return o.PSMServerID, true
}

// HasPSMServerID returns a boolean if a field has been set.
func (o *SessionManagement) HasPSMServerID() bool {
	if o != nil && o.PSMServerID != nil {
		return true
	}

	return false
}

// SetPSMServerID gets a reference to the given string and assigns it to the PSMServerID field.
func (o *SessionManagement) SetPSMServerID(v string) {
	o.PSMServerID = &v
}

func (o SessionManagement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequirePrivilegedSessionMonitoringAndIsolation != nil {
		toSerialize["requirePrivilegedSessionMonitoringAndIsolation"] = o.RequirePrivilegedSessionMonitoringAndIsolation
	}
	if o.RecordAndSaveSessionActivity != nil {
		toSerialize["recordAndSaveSessionActivity"] = o.RecordAndSaveSessionActivity
	}
	if o.PSMServerID != nil {
		toSerialize["PSMServerID"] = o.PSMServerID
	}
	return json.Marshal(toSerialize)
}

type NullableSessionManagement struct {
	value *SessionManagement
	isSet bool
}

func (v NullableSessionManagement) Get() *SessionManagement {
	return v.value
}

func (v *NullableSessionManagement) Set(val *SessionManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionManagement(val *SessionManagement) *NullableSessionManagement {
	return &NullableSessionManagement{value: val, isSet: true}
}

func (v NullableSessionManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


