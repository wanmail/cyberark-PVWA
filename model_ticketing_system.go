/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TicketingSystem struct for TicketingSystem
type TicketingSystem struct {
	Name *string `json:"Name,omitempty"`
	Number *string `json:"Number,omitempty"`
	Status *string `json:"Status,omitempty"`
}

// NewTicketingSystem instantiates a new TicketingSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketingSystem() *TicketingSystem {
	this := TicketingSystem{}
	return &this
}

// NewTicketingSystemWithDefaults instantiates a new TicketingSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketingSystemWithDefaults() *TicketingSystem {
	this := TicketingSystem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TicketingSystem) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketingSystem) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TicketingSystem) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TicketingSystem) SetName(v string) {
	o.Name = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *TicketingSystem) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketingSystem) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *TicketingSystem) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *TicketingSystem) SetNumber(v string) {
	o.Number = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TicketingSystem) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketingSystem) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TicketingSystem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TicketingSystem) SetStatus(v string) {
	o.Status = &v
}

func (o TicketingSystem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Number != nil {
		toSerialize["Number"] = o.Number
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableTicketingSystem struct {
	value *TicketingSystem
	isSet bool
}

func (v NullableTicketingSystem) Get() *TicketingSystem {
	return v.value
}

func (v *NullableTicketingSystem) Set(val *TicketingSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketingSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketingSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketingSystem(val *TicketingSystem) *NullableTicketingSystem {
	return &NullableTicketingSystem{value: val, isSet: true}
}

func (v NullableTicketingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketingSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


