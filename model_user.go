/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// User struct for User
type User struct {
	// Whether or not the user is enabled.
	EnableUser *bool `json:"enableUser,omitempty"`
	// Whether or not the user must change their password on the next logon.
	ChangePassOnNextLogon *bool `json:"changePassOnNextLogon,omitempty"`
	// The date when the user will expire.
	ExpiryDate *int64 `json:"expiryDate,omitempty"`
	// Whether or not the user is suspended due to maximum violations.
	Suspended *bool `json:"suspended,omitempty"`
	// Returns the last successful login date of the user.
	LastSuccessfulLoginDate *int64 `json:"lastSuccessfulLoginDate,omitempty"`
	// The CyberArk interfaces that this user is authorized to use.  The possible values depends on the specific user type as defined in the license.
	UnAuthorizedInterfaces []string `json:"unAuthorizedInterfaces,omitempty"`
	// The authentication method that the User will use to log on.
	AuthenticationMethod []string `json:"authenticationMethod,omitempty"`
	// Whether the User’s password will be retained until he decides to change it.
	PasswordNeverExpires *bool `json:"passwordNeverExpires,omitempty"`
	// The User’s distinguished name.  The usage is for PKI authentication, this will match the certificate Subject Name or DN.
	DistinguishedName *string `json:"distinguishedName,omitempty"`
	// Notes and comments.
	Description *string `json:"description,omitempty"`
	BusinessAddress *UserBusinessAddress `json:"businessAddress,omitempty"`
	Internet *UserInternet `json:"internet,omitempty"`
	Phones *UserPhone `json:"phones,omitempty"`
	PersonalDetails *UserPersonalDetails `json:"personalDetails,omitempty"`
	// The password that the user will use to log on the first time.  This password must meet the password policy requirements.
	InitialPassword *string `json:"initialPassword,omitempty"`
	// The unique id of the user.
	Id *int64 `json:"id,omitempty"`
	// The name of the user.
	Username string `json:"username"`
	// The source of the user.  Possible values: CyberArk, LDAP.
	Source *string `json:"source,omitempty"`
	// The type of the user.  Possible types could be any user types according to the license.
	UserType *string `json:"userType,omitempty"`
	// Whether the user is a known component or not.  Possible values: true (if it is component) or false otherwise.    The following user types are considered as components:      CPM      ENE      PVWA      PSM      AppProvider      OPMProvider      PIMProvider      PSMPServer      PSMPADBridge      PSMHTML5Gateway      CIFS      FTP      SFE      DCAInstance      FEWA      SEG
	ComponentUser *bool `json:"componentUser,omitempty"`
	// The security attributes and authorizations, contains:  AddSafe  AuditUsers  AddUpdateUsers  ResetUsersPasswords  ActivateUsers  AddNetworkAreas  ManageDirectoryMapping  ManageServerFileCategories  BackupAllSafes  RestoreAllSafes
	GroupsMembership []GroupMembershipDetails `json:"groupsMembership,omitempty"`
	// The distinguished name of the user. Only applies to LDAP users.
	UserDN *string `json:"userDN,omitempty"`
	VaultAuthorization []string `json:"vaultAuthorization,omitempty"`
	// The Vault Location.
	Location *string `json:"location,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(username string) *User {
	this := User{}
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetEnableUser returns the EnableUser field value if set, zero value otherwise.
func (o *User) GetEnableUser() bool {
	if o == nil || o.EnableUser == nil {
		var ret bool
		return ret
	}
	return *o.EnableUser
}

// GetEnableUserOk returns a tuple with the EnableUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnableUserOk() (*bool, bool) {
	if o == nil || o.EnableUser == nil {
		return nil, false
	}
	return o.EnableUser, true
}

// HasEnableUser returns a boolean if a field has been set.
func (o *User) HasEnableUser() bool {
	if o != nil && o.EnableUser != nil {
		return true
	}

	return false
}

// SetEnableUser gets a reference to the given bool and assigns it to the EnableUser field.
func (o *User) SetEnableUser(v bool) {
	o.EnableUser = &v
}

// GetChangePassOnNextLogon returns the ChangePassOnNextLogon field value if set, zero value otherwise.
func (o *User) GetChangePassOnNextLogon() bool {
	if o == nil || o.ChangePassOnNextLogon == nil {
		var ret bool
		return ret
	}
	return *o.ChangePassOnNextLogon
}

// GetChangePassOnNextLogonOk returns a tuple with the ChangePassOnNextLogon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetChangePassOnNextLogonOk() (*bool, bool) {
	if o == nil || o.ChangePassOnNextLogon == nil {
		return nil, false
	}
	return o.ChangePassOnNextLogon, true
}

// HasChangePassOnNextLogon returns a boolean if a field has been set.
func (o *User) HasChangePassOnNextLogon() bool {
	if o != nil && o.ChangePassOnNextLogon != nil {
		return true
	}

	return false
}

// SetChangePassOnNextLogon gets a reference to the given bool and assigns it to the ChangePassOnNextLogon field.
func (o *User) SetChangePassOnNextLogon(v bool) {
	o.ChangePassOnNextLogon = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *User) GetExpiryDate() int64 {
	if o == nil || o.ExpiryDate == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetExpiryDateOk() (*int64, bool) {
	if o == nil || o.ExpiryDate == nil {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *User) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *User) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *User) GetSuspended() bool {
	if o == nil || o.Suspended == nil {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSuspendedOk() (*bool, bool) {
	if o == nil || o.Suspended == nil {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *User) HasSuspended() bool {
	if o != nil && o.Suspended != nil {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *User) SetSuspended(v bool) {
	o.Suspended = &v
}

// GetLastSuccessfulLoginDate returns the LastSuccessfulLoginDate field value if set, zero value otherwise.
func (o *User) GetLastSuccessfulLoginDate() int64 {
	if o == nil || o.LastSuccessfulLoginDate == nil {
		var ret int64
		return ret
	}
	return *o.LastSuccessfulLoginDate
}

// GetLastSuccessfulLoginDateOk returns a tuple with the LastSuccessfulLoginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastSuccessfulLoginDateOk() (*int64, bool) {
	if o == nil || o.LastSuccessfulLoginDate == nil {
		return nil, false
	}
	return o.LastSuccessfulLoginDate, true
}

// HasLastSuccessfulLoginDate returns a boolean if a field has been set.
func (o *User) HasLastSuccessfulLoginDate() bool {
	if o != nil && o.LastSuccessfulLoginDate != nil {
		return true
	}

	return false
}

// SetLastSuccessfulLoginDate gets a reference to the given int64 and assigns it to the LastSuccessfulLoginDate field.
func (o *User) SetLastSuccessfulLoginDate(v int64) {
	o.LastSuccessfulLoginDate = &v
}

// GetUnAuthorizedInterfaces returns the UnAuthorizedInterfaces field value if set, zero value otherwise.
func (o *User) GetUnAuthorizedInterfaces() []string {
	if o == nil || o.UnAuthorizedInterfaces == nil {
		var ret []string
		return ret
	}
	return o.UnAuthorizedInterfaces
}

// GetUnAuthorizedInterfacesOk returns a tuple with the UnAuthorizedInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUnAuthorizedInterfacesOk() ([]string, bool) {
	if o == nil || o.UnAuthorizedInterfaces == nil {
		return nil, false
	}
	return o.UnAuthorizedInterfaces, true
}

// HasUnAuthorizedInterfaces returns a boolean if a field has been set.
func (o *User) HasUnAuthorizedInterfaces() bool {
	if o != nil && o.UnAuthorizedInterfaces != nil {
		return true
	}

	return false
}

// SetUnAuthorizedInterfaces gets a reference to the given []string and assigns it to the UnAuthorizedInterfaces field.
func (o *User) SetUnAuthorizedInterfaces(v []string) {
	o.UnAuthorizedInterfaces = v
}

// GetAuthenticationMethod returns the AuthenticationMethod field value if set, zero value otherwise.
func (o *User) GetAuthenticationMethod() []string {
	if o == nil || o.AuthenticationMethod == nil {
		var ret []string
		return ret
	}
	return o.AuthenticationMethod
}

// GetAuthenticationMethodOk returns a tuple with the AuthenticationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAuthenticationMethodOk() ([]string, bool) {
	if o == nil || o.AuthenticationMethod == nil {
		return nil, false
	}
	return o.AuthenticationMethod, true
}

// HasAuthenticationMethod returns a boolean if a field has been set.
func (o *User) HasAuthenticationMethod() bool {
	if o != nil && o.AuthenticationMethod != nil {
		return true
	}

	return false
}

// SetAuthenticationMethod gets a reference to the given []string and assigns it to the AuthenticationMethod field.
func (o *User) SetAuthenticationMethod(v []string) {
	o.AuthenticationMethod = v
}

// GetPasswordNeverExpires returns the PasswordNeverExpires field value if set, zero value otherwise.
func (o *User) GetPasswordNeverExpires() bool {
	if o == nil || o.PasswordNeverExpires == nil {
		var ret bool
		return ret
	}
	return *o.PasswordNeverExpires
}

// GetPasswordNeverExpiresOk returns a tuple with the PasswordNeverExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordNeverExpiresOk() (*bool, bool) {
	if o == nil || o.PasswordNeverExpires == nil {
		return nil, false
	}
	return o.PasswordNeverExpires, true
}

// HasPasswordNeverExpires returns a boolean if a field has been set.
func (o *User) HasPasswordNeverExpires() bool {
	if o != nil && o.PasswordNeverExpires != nil {
		return true
	}

	return false
}

// SetPasswordNeverExpires gets a reference to the given bool and assigns it to the PasswordNeverExpires field.
func (o *User) SetPasswordNeverExpires(v bool) {
	o.PasswordNeverExpires = &v
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *User) GetDistinguishedName() string {
	if o == nil || o.DistinguishedName == nil {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || o.DistinguishedName == nil {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *User) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName != nil {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *User) SetDistinguishedName(v string) {
	o.DistinguishedName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *User) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description = &v
}

// GetBusinessAddress returns the BusinessAddress field value if set, zero value otherwise.
func (o *User) GetBusinessAddress() UserBusinessAddress {
	if o == nil || o.BusinessAddress == nil {
		var ret UserBusinessAddress
		return ret
	}
	return *o.BusinessAddress
}

// GetBusinessAddressOk returns a tuple with the BusinessAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBusinessAddressOk() (*UserBusinessAddress, bool) {
	if o == nil || o.BusinessAddress == nil {
		return nil, false
	}
	return o.BusinessAddress, true
}

// HasBusinessAddress returns a boolean if a field has been set.
func (o *User) HasBusinessAddress() bool {
	if o != nil && o.BusinessAddress != nil {
		return true
	}

	return false
}

// SetBusinessAddress gets a reference to the given UserBusinessAddress and assigns it to the BusinessAddress field.
func (o *User) SetBusinessAddress(v UserBusinessAddress) {
	o.BusinessAddress = &v
}

// GetInternet returns the Internet field value if set, zero value otherwise.
func (o *User) GetInternet() UserInternet {
	if o == nil || o.Internet == nil {
		var ret UserInternet
		return ret
	}
	return *o.Internet
}

// GetInternetOk returns a tuple with the Internet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetInternetOk() (*UserInternet, bool) {
	if o == nil || o.Internet == nil {
		return nil, false
	}
	return o.Internet, true
}

// HasInternet returns a boolean if a field has been set.
func (o *User) HasInternet() bool {
	if o != nil && o.Internet != nil {
		return true
	}

	return false
}

// SetInternet gets a reference to the given UserInternet and assigns it to the Internet field.
func (o *User) SetInternet(v UserInternet) {
	o.Internet = &v
}

// GetPhones returns the Phones field value if set, zero value otherwise.
func (o *User) GetPhones() UserPhone {
	if o == nil || o.Phones == nil {
		var ret UserPhone
		return ret
	}
	return *o.Phones
}

// GetPhonesOk returns a tuple with the Phones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhonesOk() (*UserPhone, bool) {
	if o == nil || o.Phones == nil {
		return nil, false
	}
	return o.Phones, true
}

// HasPhones returns a boolean if a field has been set.
func (o *User) HasPhones() bool {
	if o != nil && o.Phones != nil {
		return true
	}

	return false
}

// SetPhones gets a reference to the given UserPhone and assigns it to the Phones field.
func (o *User) SetPhones(v UserPhone) {
	o.Phones = &v
}

// GetPersonalDetails returns the PersonalDetails field value if set, zero value otherwise.
func (o *User) GetPersonalDetails() UserPersonalDetails {
	if o == nil || o.PersonalDetails == nil {
		var ret UserPersonalDetails
		return ret
	}
	return *o.PersonalDetails
}

// GetPersonalDetailsOk returns a tuple with the PersonalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPersonalDetailsOk() (*UserPersonalDetails, bool) {
	if o == nil || o.PersonalDetails == nil {
		return nil, false
	}
	return o.PersonalDetails, true
}

// HasPersonalDetails returns a boolean if a field has been set.
func (o *User) HasPersonalDetails() bool {
	if o != nil && o.PersonalDetails != nil {
		return true
	}

	return false
}

// SetPersonalDetails gets a reference to the given UserPersonalDetails and assigns it to the PersonalDetails field.
func (o *User) SetPersonalDetails(v UserPersonalDetails) {
	o.PersonalDetails = &v
}

// GetInitialPassword returns the InitialPassword field value if set, zero value otherwise.
func (o *User) GetInitialPassword() string {
	if o == nil || o.InitialPassword == nil {
		var ret string
		return ret
	}
	return *o.InitialPassword
}

// GetInitialPasswordOk returns a tuple with the InitialPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetInitialPasswordOk() (*string, bool) {
	if o == nil || o.InitialPassword == nil {
		return nil, false
	}
	return o.InitialPassword, true
}

// HasInitialPassword returns a boolean if a field has been set.
func (o *User) HasInitialPassword() bool {
	if o != nil && o.InitialPassword != nil {
		return true
	}

	return false
}

// SetInitialPassword gets a reference to the given string and assigns it to the InitialPassword field.
func (o *User) SetInitialPassword(v string) {
	o.InitialPassword = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *User) SetId(v int64) {
	o.Id = &v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *User) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *User) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *User) SetSource(v string) {
	o.Source = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *User) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *User) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *User) SetUserType(v string) {
	o.UserType = &v
}

// GetComponentUser returns the ComponentUser field value if set, zero value otherwise.
func (o *User) GetComponentUser() bool {
	if o == nil || o.ComponentUser == nil {
		var ret bool
		return ret
	}
	return *o.ComponentUser
}

// GetComponentUserOk returns a tuple with the ComponentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetComponentUserOk() (*bool, bool) {
	if o == nil || o.ComponentUser == nil {
		return nil, false
	}
	return o.ComponentUser, true
}

// HasComponentUser returns a boolean if a field has been set.
func (o *User) HasComponentUser() bool {
	if o != nil && o.ComponentUser != nil {
		return true
	}

	return false
}

// SetComponentUser gets a reference to the given bool and assigns it to the ComponentUser field.
func (o *User) SetComponentUser(v bool) {
	o.ComponentUser = &v
}

// GetGroupsMembership returns the GroupsMembership field value if set, zero value otherwise.
func (o *User) GetGroupsMembership() []GroupMembershipDetails {
	if o == nil || o.GroupsMembership == nil {
		var ret []GroupMembershipDetails
		return ret
	}
	return o.GroupsMembership
}

// GetGroupsMembershipOk returns a tuple with the GroupsMembership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGroupsMembershipOk() ([]GroupMembershipDetails, bool) {
	if o == nil || o.GroupsMembership == nil {
		return nil, false
	}
	return o.GroupsMembership, true
}

// HasGroupsMembership returns a boolean if a field has been set.
func (o *User) HasGroupsMembership() bool {
	if o != nil && o.GroupsMembership != nil {
		return true
	}

	return false
}

// SetGroupsMembership gets a reference to the given []GroupMembershipDetails and assigns it to the GroupsMembership field.
func (o *User) SetGroupsMembership(v []GroupMembershipDetails) {
	o.GroupsMembership = v
}

// GetUserDN returns the UserDN field value if set, zero value otherwise.
func (o *User) GetUserDN() string {
	if o == nil || o.UserDN == nil {
		var ret string
		return ret
	}
	return *o.UserDN
}

// GetUserDNOk returns a tuple with the UserDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserDNOk() (*string, bool) {
	if o == nil || o.UserDN == nil {
		return nil, false
	}
	return o.UserDN, true
}

// HasUserDN returns a boolean if a field has been set.
func (o *User) HasUserDN() bool {
	if o != nil && o.UserDN != nil {
		return true
	}

	return false
}

// SetUserDN gets a reference to the given string and assigns it to the UserDN field.
func (o *User) SetUserDN(v string) {
	o.UserDN = &v
}

// GetVaultAuthorization returns the VaultAuthorization field value if set, zero value otherwise.
func (o *User) GetVaultAuthorization() []string {
	if o == nil || o.VaultAuthorization == nil {
		var ret []string
		return ret
	}
	return o.VaultAuthorization
}

// GetVaultAuthorizationOk returns a tuple with the VaultAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVaultAuthorizationOk() ([]string, bool) {
	if o == nil || o.VaultAuthorization == nil {
		return nil, false
	}
	return o.VaultAuthorization, true
}

// HasVaultAuthorization returns a boolean if a field has been set.
func (o *User) HasVaultAuthorization() bool {
	if o != nil && o.VaultAuthorization != nil {
		return true
	}

	return false
}

// SetVaultAuthorization gets a reference to the given []string and assigns it to the VaultAuthorization field.
func (o *User) SetVaultAuthorization(v []string) {
	o.VaultAuthorization = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *User) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *User) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *User) SetLocation(v string) {
	o.Location = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableUser != nil {
		toSerialize["enableUser"] = o.EnableUser
	}
	if o.ChangePassOnNextLogon != nil {
		toSerialize["changePassOnNextLogon"] = o.ChangePassOnNextLogon
	}
	if o.ExpiryDate != nil {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if o.Suspended != nil {
		toSerialize["suspended"] = o.Suspended
	}
	if o.LastSuccessfulLoginDate != nil {
		toSerialize["lastSuccessfulLoginDate"] = o.LastSuccessfulLoginDate
	}
	if o.UnAuthorizedInterfaces != nil {
		toSerialize["unAuthorizedInterfaces"] = o.UnAuthorizedInterfaces
	}
	if o.AuthenticationMethod != nil {
		toSerialize["authenticationMethod"] = o.AuthenticationMethod
	}
	if o.PasswordNeverExpires != nil {
		toSerialize["passwordNeverExpires"] = o.PasswordNeverExpires
	}
	if o.DistinguishedName != nil {
		toSerialize["distinguishedName"] = o.DistinguishedName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.BusinessAddress != nil {
		toSerialize["businessAddress"] = o.BusinessAddress
	}
	if o.Internet != nil {
		toSerialize["internet"] = o.Internet
	}
	if o.Phones != nil {
		toSerialize["phones"] = o.Phones
	}
	if o.PersonalDetails != nil {
		toSerialize["personalDetails"] = o.PersonalDetails
	}
	if o.InitialPassword != nil {
		toSerialize["initialPassword"] = o.InitialPassword
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.UserType != nil {
		toSerialize["userType"] = o.UserType
	}
	if o.ComponentUser != nil {
		toSerialize["componentUser"] = o.ComponentUser
	}
	if o.GroupsMembership != nil {
		toSerialize["groupsMembership"] = o.GroupsMembership
	}
	if o.UserDN != nil {
		toSerialize["userDN"] = o.UserDN
	}
	if o.VaultAuthorization != nil {
		toSerialize["vaultAuthorization"] = o.VaultAuthorization
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


