/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserBusinessAddress struct for UserBusinessAddress
type UserBusinessAddress struct {
	WorkStreet *string `json:"workStreet,omitempty"`
	WorkCity *string `json:"workCity,omitempty"`
	WorkState *string `json:"workState,omitempty"`
	WorkZip *string `json:"workZip,omitempty"`
	WorkCountry *string `json:"workCountry,omitempty"`
}

// NewUserBusinessAddress instantiates a new UserBusinessAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBusinessAddress() *UserBusinessAddress {
	this := UserBusinessAddress{}
	return &this
}

// NewUserBusinessAddressWithDefaults instantiates a new UserBusinessAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBusinessAddressWithDefaults() *UserBusinessAddress {
	this := UserBusinessAddress{}
	return &this
}

// GetWorkStreet returns the WorkStreet field value if set, zero value otherwise.
func (o *UserBusinessAddress) GetWorkStreet() string {
	if o == nil || o.WorkStreet == nil {
		var ret string
		return ret
	}
	return *o.WorkStreet
}

// GetWorkStreetOk returns a tuple with the WorkStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBusinessAddress) GetWorkStreetOk() (*string, bool) {
	if o == nil || o.WorkStreet == nil {
		return nil, false
	}
	return o.WorkStreet, true
}

// HasWorkStreet returns a boolean if a field has been set.
func (o *UserBusinessAddress) HasWorkStreet() bool {
	if o != nil && o.WorkStreet != nil {
		return true
	}

	return false
}

// SetWorkStreet gets a reference to the given string and assigns it to the WorkStreet field.
func (o *UserBusinessAddress) SetWorkStreet(v string) {
	o.WorkStreet = &v
}

// GetWorkCity returns the WorkCity field value if set, zero value otherwise.
func (o *UserBusinessAddress) GetWorkCity() string {
	if o == nil || o.WorkCity == nil {
		var ret string
		return ret
	}
	return *o.WorkCity
}

// GetWorkCityOk returns a tuple with the WorkCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBusinessAddress) GetWorkCityOk() (*string, bool) {
	if o == nil || o.WorkCity == nil {
		return nil, false
	}
	return o.WorkCity, true
}

// HasWorkCity returns a boolean if a field has been set.
func (o *UserBusinessAddress) HasWorkCity() bool {
	if o != nil && o.WorkCity != nil {
		return true
	}

	return false
}

// SetWorkCity gets a reference to the given string and assigns it to the WorkCity field.
func (o *UserBusinessAddress) SetWorkCity(v string) {
	o.WorkCity = &v
}

// GetWorkState returns the WorkState field value if set, zero value otherwise.
func (o *UserBusinessAddress) GetWorkState() string {
	if o == nil || o.WorkState == nil {
		var ret string
		return ret
	}
	return *o.WorkState
}

// GetWorkStateOk returns a tuple with the WorkState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBusinessAddress) GetWorkStateOk() (*string, bool) {
	if o == nil || o.WorkState == nil {
		return nil, false
	}
	return o.WorkState, true
}

// HasWorkState returns a boolean if a field has been set.
func (o *UserBusinessAddress) HasWorkState() bool {
	if o != nil && o.WorkState != nil {
		return true
	}

	return false
}

// SetWorkState gets a reference to the given string and assigns it to the WorkState field.
func (o *UserBusinessAddress) SetWorkState(v string) {
	o.WorkState = &v
}

// GetWorkZip returns the WorkZip field value if set, zero value otherwise.
func (o *UserBusinessAddress) GetWorkZip() string {
	if o == nil || o.WorkZip == nil {
		var ret string
		return ret
	}
	return *o.WorkZip
}

// GetWorkZipOk returns a tuple with the WorkZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBusinessAddress) GetWorkZipOk() (*string, bool) {
	if o == nil || o.WorkZip == nil {
		return nil, false
	}
	return o.WorkZip, true
}

// HasWorkZip returns a boolean if a field has been set.
func (o *UserBusinessAddress) HasWorkZip() bool {
	if o != nil && o.WorkZip != nil {
		return true
	}

	return false
}

// SetWorkZip gets a reference to the given string and assigns it to the WorkZip field.
func (o *UserBusinessAddress) SetWorkZip(v string) {
	o.WorkZip = &v
}

// GetWorkCountry returns the WorkCountry field value if set, zero value otherwise.
func (o *UserBusinessAddress) GetWorkCountry() string {
	if o == nil || o.WorkCountry == nil {
		var ret string
		return ret
	}
	return *o.WorkCountry
}

// GetWorkCountryOk returns a tuple with the WorkCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBusinessAddress) GetWorkCountryOk() (*string, bool) {
	if o == nil || o.WorkCountry == nil {
		return nil, false
	}
	return o.WorkCountry, true
}

// HasWorkCountry returns a boolean if a field has been set.
func (o *UserBusinessAddress) HasWorkCountry() bool {
	if o != nil && o.WorkCountry != nil {
		return true
	}

	return false
}

// SetWorkCountry gets a reference to the given string and assigns it to the WorkCountry field.
func (o *UserBusinessAddress) SetWorkCountry(v string) {
	o.WorkCountry = &v
}

func (o UserBusinessAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WorkStreet != nil {
		toSerialize["workStreet"] = o.WorkStreet
	}
	if o.WorkCity != nil {
		toSerialize["workCity"] = o.WorkCity
	}
	if o.WorkState != nil {
		toSerialize["workState"] = o.WorkState
	}
	if o.WorkZip != nil {
		toSerialize["workZip"] = o.WorkZip
	}
	if o.WorkCountry != nil {
		toSerialize["workCountry"] = o.WorkCountry
	}
	return json.Marshal(toSerialize)
}

type NullableUserBusinessAddress struct {
	value *UserBusinessAddress
	isSet bool
}

func (v NullableUserBusinessAddress) Get() *UserBusinessAddress {
	return v.value
}

func (v *NullableUserBusinessAddress) Set(val *UserBusinessAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBusinessAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBusinessAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBusinessAddress(val *UserBusinessAddress) *NullableUserBusinessAddress {
	return &NullableUserBusinessAddress{value: val, isSet: true}
}

func (v NullableUserBusinessAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBusinessAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


