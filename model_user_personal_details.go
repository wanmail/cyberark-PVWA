/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPersonalDetails struct for UserPersonalDetails
type UserPersonalDetails struct {
	Street *string `json:"street,omitempty"`
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
	Zip *string `json:"zip,omitempty"`
	Country *string `json:"country,omitempty"`
	Title *string `json:"title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Department *string `json:"department,omitempty"`
	Profession *string `json:"profession,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	MiddleName *string `json:"middleName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
}

// NewUserPersonalDetails instantiates a new UserPersonalDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPersonalDetails() *UserPersonalDetails {
	this := UserPersonalDetails{}
	return &this
}

// NewUserPersonalDetailsWithDefaults instantiates a new UserPersonalDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPersonalDetailsWithDefaults() *UserPersonalDetails {
	this := UserPersonalDetails{}
	return &this
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *UserPersonalDetails) SetStreet(v string) {
	o.Street = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserPersonalDetails) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UserPersonalDetails) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetZip() string {
	if o == nil || o.Zip == nil {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetZipOk() (*string, bool) {
	if o == nil || o.Zip == nil {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasZip() bool {
	if o != nil && o.Zip != nil {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *UserPersonalDetails) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserPersonalDetails) SetCountry(v string) {
	o.Country = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UserPersonalDetails) SetTitle(v string) {
	o.Title = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetOrganization() string {
	if o == nil || o.Organization == nil {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetOrganizationOk() (*string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *UserPersonalDetails) SetOrganization(v string) {
	o.Organization = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetDepartment() string {
	if o == nil || o.Department == nil {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetDepartmentOk() (*string, bool) {
	if o == nil || o.Department == nil {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasDepartment() bool {
	if o != nil && o.Department != nil {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *UserPersonalDetails) SetDepartment(v string) {
	o.Department = &v
}

// GetProfession returns the Profession field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetProfession() string {
	if o == nil || o.Profession == nil {
		var ret string
		return ret
	}
	return *o.Profession
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetProfessionOk() (*string, bool) {
	if o == nil || o.Profession == nil {
		return nil, false
	}
	return o.Profession, true
}

// HasProfession returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasProfession() bool {
	if o != nil && o.Profession != nil {
		return true
	}

	return false
}

// SetProfession gets a reference to the given string and assigns it to the Profession field.
func (o *UserPersonalDetails) SetProfession(v string) {
	o.Profession = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserPersonalDetails) SetFirstName(v string) {
	o.FirstName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetMiddleName() string {
	if o == nil || o.MiddleName == nil {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetMiddleNameOk() (*string, bool) {
	if o == nil || o.MiddleName == nil {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasMiddleName() bool {
	if o != nil && o.MiddleName != nil {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *UserPersonalDetails) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserPersonalDetails) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPersonalDetails) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserPersonalDetails) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserPersonalDetails) SetLastName(v string) {
	o.LastName = &v
}

func (o UserPersonalDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Zip != nil {
		toSerialize["zip"] = o.Zip
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Department != nil {
		toSerialize["department"] = o.Department
	}
	if o.Profession != nil {
		toSerialize["profession"] = o.Profession
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.MiddleName != nil {
		toSerialize["middleName"] = o.MiddleName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	return json.Marshal(toSerialize)
}

type NullableUserPersonalDetails struct {
	value *UserPersonalDetails
	isSet bool
}

func (v NullableUserPersonalDetails) Get() *UserPersonalDetails {
	return v.value
}

func (v *NullableUserPersonalDetails) Set(val *UserPersonalDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPersonalDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPersonalDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPersonalDetails(val *UserPersonalDetails) *NullableUserPersonalDetails {
	return &NullableUserPersonalDetails{value: val, isSet: true}
}

func (v NullableUserPersonalDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPersonalDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


