/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VersionData struct for VersionData
type VersionData struct {
	// Secret's version unique ID
	VersionID *int64 `json:"versionID,omitempty"`
	// The user that modified the secret
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// Secret's modification date
	ModificationDate *int64 `json:"modificationDate,omitempty"`
	// Indication whether it's temporary or real password
	IsTemporary *bool `json:"isTemporary,omitempty"`
}

// NewVersionData instantiates a new VersionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionData() *VersionData {
	this := VersionData{}
	return &this
}

// NewVersionDataWithDefaults instantiates a new VersionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDataWithDefaults() *VersionData {
	this := VersionData{}
	return &this
}

// GetVersionID returns the VersionID field value if set, zero value otherwise.
func (o *VersionData) GetVersionID() int64 {
	if o == nil || o.VersionID == nil {
		var ret int64
		return ret
	}
	return *o.VersionID
}

// GetVersionIDOk returns a tuple with the VersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetVersionIDOk() (*int64, bool) {
	if o == nil || o.VersionID == nil {
		return nil, false
	}
	return o.VersionID, true
}

// HasVersionID returns a boolean if a field has been set.
func (o *VersionData) HasVersionID() bool {
	if o != nil && o.VersionID != nil {
		return true
	}

	return false
}

// SetVersionID gets a reference to the given int64 and assigns it to the VersionID field.
func (o *VersionData) SetVersionID(v int64) {
	o.VersionID = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *VersionData) GetModifiedBy() string {
	if o == nil || o.ModifiedBy == nil {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetModifiedByOk() (*string, bool) {
	if o == nil || o.ModifiedBy == nil {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *VersionData) HasModifiedBy() bool {
	if o != nil && o.ModifiedBy != nil {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *VersionData) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *VersionData) GetModificationDate() int64 {
	if o == nil || o.ModificationDate == nil {
		var ret int64
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetModificationDateOk() (*int64, bool) {
	if o == nil || o.ModificationDate == nil {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *VersionData) HasModificationDate() bool {
	if o != nil && o.ModificationDate != nil {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given int64 and assigns it to the ModificationDate field.
func (o *VersionData) SetModificationDate(v int64) {
	o.ModificationDate = &v
}

// GetIsTemporary returns the IsTemporary field value if set, zero value otherwise.
func (o *VersionData) GetIsTemporary() bool {
	if o == nil || o.IsTemporary == nil {
		var ret bool
		return ret
	}
	return *o.IsTemporary
}

// GetIsTemporaryOk returns a tuple with the IsTemporary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionData) GetIsTemporaryOk() (*bool, bool) {
	if o == nil || o.IsTemporary == nil {
		return nil, false
	}
	return o.IsTemporary, true
}

// HasIsTemporary returns a boolean if a field has been set.
func (o *VersionData) HasIsTemporary() bool {
	if o != nil && o.IsTemporary != nil {
		return true
	}

	return false
}

// SetIsTemporary gets a reference to the given bool and assigns it to the IsTemporary field.
func (o *VersionData) SetIsTemporary(v bool) {
	o.IsTemporary = &v
}

func (o VersionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VersionID != nil {
		toSerialize["versionID"] = o.VersionID
	}
	if o.ModifiedBy != nil {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if o.ModificationDate != nil {
		toSerialize["modificationDate"] = o.ModificationDate
	}
	if o.IsTemporary != nil {
		toSerialize["isTemporary"] = o.IsTemporary
	}
	return json.Marshal(toSerialize)
}

type NullableVersionData struct {
	value *VersionData
	isSet bool
}

func (v NullableVersionData) Get() *VersionData {
	return v.value
}

func (v *NullableVersionData) Set(val *VersionData) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionData) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionData(val *VersionData) *NullableVersionData {
	return &NullableVersionData{value: val, isSet: true}
}

func (v NullableVersionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


